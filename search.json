[
  {
    "objectID": "Project/project.html",
    "href": "Project/project.html",
    "title": "Project landing page",
    "section": "",
    "text": "Project landing page",
    "crumbs": [
      "Project",
      "Project landing page"
    ]
  },
  {
    "objectID": "WIPs/2 - Data processing.html",
    "href": "WIPs/2 - Data processing.html",
    "title": "Data processing",
    "section": "",
    "text": "Data processing\nIn this second workshop we will cover - Examining / exploring data - Filtering rows and columns - Basic descriptive statistics - Adding new columns - Group bys and summary tables",
    "crumbs": [
      "WIPs",
      "Data processing"
    ]
  },
  {
    "objectID": "Workshops/Workshops.html",
    "href": "Workshops/Workshops.html",
    "title": "Workshops landing page",
    "section": "",
    "text": "Workshops landing page",
    "crumbs": [
      "Workshops",
      "Workshops landing page"
    ]
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Python Training Intensive",
    "section": "",
    "text": "We should have some instructions for setting up here, shouldn’t we?",
    "crumbs": [
      "Python Training Intensive"
    ]
  },
  {
    "objectID": "setup.html#setting-up",
    "href": "setup.html#setting-up",
    "title": "Python Training Intensive",
    "section": "",
    "text": "We should have some instructions for setting up here, shouldn’t we?",
    "crumbs": [
      "Python Training Intensive"
    ]
  },
  {
    "objectID": "WIPs/1 - Fundamentals.html",
    "href": "WIPs/1 - Fundamentals.html",
    "title": "Fundamentals",
    "section": "",
    "text": "In this first workshop we will cover\n\nVariables\nFunctions\nModules\nImporting data\n\n\n\nPython is a programming language that can be used to build programs (i.e. a “general programming language”), but it can also be used to analyse data by importing a number of useful modules.\nWe are using Spyder to interact with Python more comfortably. If you have used RStudio to interact with R before, you should feel right at home: Spyder is a program designed for doing data science with Python.\nPython can be used interactively in a console, or we can build scripts and programs with it, making the most out of Spyder’s code editor.\nWe will start by using the console to work interactively. This is our direct line to the computer, and is the simplest way to run code. Don’t worry about any unfamiliar language, fonts or colours - we can ignore most of it for now - all you need to know is that\n\nIn [1]: ... is code that we’ve sent to the computer, and\nOut[1]: ... is its response.\n\n\n\n\nTo start with, we can use Python like a calculator. Type the following commands in the console, and press Enter to execute them:\n\n\nTo start with, we can use Python like a calculator. Type the following commands in the console, and press Enter to execute them:\n1 + 1\n2 * 3\n4 / 10\n5 ** 2\nAfter running each command, you should see the result as an output.\n\n\n\n\nLike language, Python has nouns and verbs. We call the nouns variables: they are the ‘things’ we manipulate with our code.\nEssentially, a variable is a named container. We access it by its name, and we get its value.\nTo create a variable, you need to choose a name and a value with name = value. For example\nexample_int = 42\nWhenever you use the variable’s name, Python will now access its value:\nexample_int\nWe can use the variables in place of the values\nexample_float = 5.678\nproduct = example_int * example_float\nproduct\n\nSpyder helps us with extra panels and features apart from the Console. To see what variables you have created, look at the “Variable explorer” tab in the top right.\n\n\n\nVariables have different types. So far, we’ve just looked at storing numbers, of which there are three types:\n\nint - integers store whole numbers, e.g. 1, 5, 1000, -3.\nfloat - floating point numbers store decimals and scientific notation, e.g. 1.5, -8.97, 4e-6.\ncomplex - complex numbers express the imaginary unit with j, e.g. z = 1+2j is \\(z = 1+2i\\).\n\nLet’s look at some other types\n\n\nEven simpler than integers is the boolean type. These are either 1 or 0 (True or False), representing a single binary unit (bit). Don’t be fooled by the words, these work like numbers: True + True gives 2.\nexample_bool = True\n\nIn Python, the boolean values True and False must begin with a capital letter.\n\n\n\n\nLet’s look at variable types which aren’t (necessarily) numbers. Sequences are variables which store multiple pieces of data. For example, strings store a sequence of characters and are created with quotation marks 'blah blah blah' or \"blah blah blah\":\nexample_string = 'This is an example of a string!'\n\n\n\nWe can also create lists, which will store several variables (not necessarily of the same type). We need to use square brackets for that:\nexample_numbers = [38, 3, 54, 17, 7]\nexample_diverse = [3, 'Hi!', 9.0]\nLists are very flexible as they can contain any number of items, and any type of data. You can even nest lists inside a list, which makes for a very flexible data type.\nOperations on sequences are a bit different to numbers. We can still use + and *, but they will concatenate (append) and duplicate, rather than perform arithmetic.\nexample_string + ' How are you?'\nexample_numbers + example_diverse\n3 * example_numbers\nHowever, depending on the variable, some operations won’t work:\nsentence + favNumber\nThere are other data types like tuples, dictionaries and sets, but we won’t look at those in this session. Here’s a summary of the ones we’ve covered:\n\n\n\n\n\n\n\n\n\n\nCategory\nType\nShort name\nExample\nGenerator\n\n\n\n\nNumeric\nInteger\nint\n3\nint()\n\n\nNumeric\nFloating Point Number\nfloat\n4.2\nfloat()\n\n\nNumeric\nBoolean\nbool\nTrue\nbool()\n\n\nSequence\nString\nstr\n'A sentence '\n\" \" or ' ' or str()\n\n\nSequence\nList\nlist\n['apple', 'banana', 'cherry']\n[ ] or list()\n\n\n\nThe generator commands are new. We use these to manually change the variable type. For example,\nint(True)\nyields 1, converting a boolean into an integer. These commands are functions, as opposed to variables - we’ll look at functions a bit later.\n\n\n\n\nWe can access part of a sequence by indexing. Sequences are ordered, starting at 0, so the first element has index 0, the second index 1, the third 2 and so on. For example, see what these commands return:\nexample_string[0]\nexample_string[6]\nexample_numbers[4]\nIf you want more than one element in a sequence, you can slice. Simple slices specify a range to slice, from the first index to the last, but not including the last. For example:\nmyList[0:4]\nThat command returns elements from position 0 up to - but not including! - position 4.\n\n\n\n\nSo far, we’ve been working in the console, our direct line to the computer. However, it is often more convenient to use a script. These are simple text files which store code and run when we choose. They are useful to\n\nwrite code more comfortably,\nstore clearly defined steps in chronological order,\nshare a process with peers easily, and\nmake your work reproducible\n\nLet’s create a folder system to store our script in by creating a project.\n\nPress Projects &gt; New project... and name your project, perhaps “python_training”.\nCreate a new script with ctrl+N, File &gt; New file... or the new file button.\n\nYou should now see a script on the left panel in Spyder, looking something like this:\nTry typing a line of code in your new script, such as\nexample_message = \"This is an example message\"\nexample_message\nPress F9 to run each line, or ctrl+enter for the whole script. You should see something like the following appear in the console (depending on how you ran it):\nWe’ll work out of a script for the rest of the session. Don’t forget to save your script by pressing ctrl+S or the save button. )\n\n\n\nFunctions are little programs that do specific jobs. These are the verbs of Python, because they do things to and with our variables. Here are a few examples of built-in functions:\nlen(myList)\nmin(myList)\nmax(myList)\nsum(myList)\nround(otherNumber)\nFunctions always have parentheses () after their name, and they can take one or several arguments, or none at all, depending on what they can do, and how the user wants to use them.\nHere, we use two arguments to modify the default behaviour of the round() function:\nround(otherNumber, 2)\n5.68\n\nNotice how Spyder gives you hints about the available arguments after typing the function name?\n\n\n\nOperators are a special type of function in Python with which you’re already familiar. The most important is =, which assigns values to variables. Here is a summary of some important operators, although there are many others:\n\n\n\n\n\n\n\n\n\n\n\nOperator\nFunction\nDescription\nExample command\n\n\n\n\n=\nAssignment\nAssigns values to variables\na = 7\n\n\n#\nComment\nExcludes any following text from being run\n# This text will be ignored by Python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOperator\nFunction\nDescription\nExample command\nExample output\n\n\n\n\n+\nAddition\nAdds or concatenates values, depending on variable types\n7 + 3 or \"a\" + \"b\"\n10 or 'ab'\n\n\n-\nSubtraction\nSubtracts numerical values\n8 - 3\n5\n\n\n*\nMultiplication\nMultiplies values, depending on variable types\n7 * 2 or \"a\" * 3\n14 or 'aaa'\n\n\n/\nDivision\nDivides numerical vlues\n3 / 4\n0.75\n\n\n**\nExponentiation\nRaises a numerical value to a power\n7 ** 2\n49\n\n\n%\nRemainder\nTakes the remainder of numerical values\n13 % 7\n6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOperator\nFunction\nDescription\nExample command\nExample output\n\n\n\n\n==\nEqual to\nChecks whether two variables are the same and outputs a boolean\n1 == 1\nTrue\n\n\n!=\nNot equal to\nChecks whether two variables are different\n'1' != 1\nTrue\n\n\n&gt;\nGreater than\nChecks whether one variable is greater than the other\n1 &gt; 1\nFalse\n\n\n&gt;=\nGreater than or equal to\nChecks whether greater than (&gt;) or equal to (==) are true\n1 &gt;= 1\nTrue\n\n\n&lt;\nLess than\nChecks whether one variable is less than the other\n0 &lt; 1\nTrue\n\n\n&lt;=\nLess than or equal to\nChecks whether less than (&lt;) or equal to (==) are true\n0 &lt;= 1\nTrue\n\n\n\n\n\n\n\n\nTo find help about a function, you can use the help() function, or a ? after a function name:\nhelp(max)\nprint?\nHelp on built-in function max in module builtins:\n\nmax(...)\n    max(iterable, *[, default=obj, key=func]) -&gt; value\n    max(arg1, arg2, *args, *[, key=func]) -&gt; value\n\n    With a single iterable argument, return its biggest item. The\n    default keyword-only argument specifies an object to return if\n    the provided iterable is empty.\n    With two or more arguments, return the largest argument.\nIn Spyder, you can use the Ctrl + I keyboard shortcut to open the help in a separate pane.\n\nThe help information can often be dense and difficult to read at first, taking some practice. In the next session we look closer at interpreting this documentation, one of the most important Python skills.\n\nFor a comprehensive manual, go to the official online documentation. For questions and answers, typing the right question in a search engine will usually lead you to something helpful. If you can’t find an answer, StackOverflow is a great Q&A community.\n\n\n\nTo do more with Python, you could write new functions from scratch, but it is easier to import extra modules to extend its capabilities. For example, to access the pi constant:\npi # throws an error: it does not exist!\nimport math # this module contains the pi constant\nmath.pi # we have to specify where it comes from\nimport math as m # give a shorter name\nm.pi\nfrom math import pi # only import what is necessary\npi\nmath is part of the “Python standard library”. You can see all the functions and constants available in the math module here: https://docs.python.org/3/library/math.html\nPython distributions like Anaconda already come with a number of useful extra modules for science.\n\n\nTo install more modules, you might need to use pip (on most systems) or conda (if you use Anaconda or Miniconda) from the command line.\nWith pip, which will fetch the module from the Python Package Index (PyPI):\npip install some-module\nWith conda, which will fetch the module from the Anaconda repository:\nconda install some-module\nRefer to the module’s website to find what is recommended.\nHere, we present a few modules that are very important for data science with Python, and which are already available in the Anaconda distribution.\n\n\n\nArrays are a data type introduced by numpy, a module with many functions useful for numerical computing.\nFor example, you can convert the list we created before to then do mathematical operations on each one of its elements:\nimport numpy as np\nexample_array = np.array(example_numbers)\nexample_array * 2\n\n\n\npandas introduces dataframes, which are often used to store two-dimensional datasets with different kinds of variables in each column. If your data is stored as a spreadsheet, you probably want to import it with a pandas function.\nHere is an example of creating a pandas dataframe from scratch, populating it by hand:\nimport pandas as pd\ndf = pd.DataFrame(columns=['Name', 'Age'])\n# populate the dataframe:\ndf.loc[1] = 'Josephine', 70\ndf.loc[2] = 'Dilsah', 38\ndf\ndf.Age # access a specific variable\n\nYou can double-click on a dataframe in the Variable explorer to explore it in a separate window.\n\n\n\n\nmatplotlib is a large collection of data visualisation functions, and pyplot is a submodule of matplotlib that contains essentials.\nimport matplotlib.pyplot as plt\nplt.plot(example_array)\nThis shows a plot in the Plots tab of Spyder.\n\nIn a Python shell, you might have to use the plt.show() command to show the plot.\n\nThe default look is a line plot that joins all the points, but we can style a plot with only a few characters:\n# blue circles\nplt.plot(example_array, 'bo')\n# green squares, dashed line:\nplt.plot(example_array, 'gs--')\nExtra arguments can be used to style further:\n# red, diamonds, solid line; change width of line and size of diamonds:\nplt.plot(example_array, 'rd-', linewidth=3, markersize=10)\nTo find out about the styling shorthand and all other arguments, look at the documentation:\nplt.plot?\n\n\n\n\n\nPress “Save” or Ctrl + S to save your script.\nYour project can be reopened from the “Projects” menu in Spyder.\nBy default, your variables are not saved, which is another reason why working with a script is important: you can execute the whole script in one go to get everything back. You can however save your variables as a .spydata file if you want to (for example, if it takes a lot of time to process your data).\n\n\n\nThis morning we looked at a lot of Python features, so don’t worry if they haven’t all sunk in. Programming is best learned through practice, so keep at it! Here’s a rundown of the concepts we covered\n\n\n\n\n\n\n\nConcept\nDesctiption\n\n\n\n\nThe console vs scripts\nThe console is our window into the computer, this is where we send code directly to the computer. Scripts are files which we can write, edit, store and run code, that’s where you’ll write most of your Python.\n\n\nVariables\nVariables are the nouns of programming, this is where we store information, the objects and things of our coding. They come in different types like integers, strings and lists.\n\n\nIndexing\nIn order to access elements of a sequence variable, like a list, we need to index, e.g. example_numbers[2]. Python counts from 0.\n\n\nFunctions\nFunctions are the verbs of programming, they perform actions on our variables. Call the function by name and put inputs inside parentheses, e.g. round(2.5)\n\n\nHelp\nRunning help( ... ) will reveal the help documentation about a function or type.\n\n\nPackages\nWe can bring external code into our environment with import .... This is how we use packages, an essential for Python. Don’t forget to install the package first!",
    "crumbs": [
      "WIPs",
      "Fundamentals"
    ]
  },
  {
    "objectID": "WIPs/1 - Fundamentals.html#introducing-python-and-spyder",
    "href": "WIPs/1 - Fundamentals.html#introducing-python-and-spyder",
    "title": "Fundamentals",
    "section": "",
    "text": "Python is a programming language that can be used to build programs (i.e. a “general programming language”), but it can also be used to analyse data by importing a number of useful modules.\nWe are using Spyder to interact with Python more comfortably. If you have used RStudio to interact with R before, you should feel right at home: Spyder is a program designed for doing data science with Python.\nPython can be used interactively in a console, or we can build scripts and programs with it, making the most out of Spyder’s code editor.\nWe will start by using the console to work interactively. This is our direct line to the computer, and is the simplest way to run code. Don’t worry about any unfamiliar language, fonts or colours - we can ignore most of it for now - all you need to know is that\n\nIn [1]: ... is code that we’ve sent to the computer, and\nOut[1]: ... is its response.",
    "crumbs": [
      "WIPs",
      "Fundamentals"
    ]
  },
  {
    "objectID": "WIPs/1 - Fundamentals.html#operators",
    "href": "WIPs/1 - Fundamentals.html#operators",
    "title": "Fundamentals",
    "section": "",
    "text": "To start with, we can use Python like a calculator. Type the following commands in the console, and press Enter to execute them:\n\n\nTo start with, we can use Python like a calculator. Type the following commands in the console, and press Enter to execute them:\n1 + 1\n2 * 3\n4 / 10\n5 ** 2\nAfter running each command, you should see the result as an output.",
    "crumbs": [
      "WIPs",
      "Fundamentals"
    ]
  },
  {
    "objectID": "WIPs/1 - Fundamentals.html#variables",
    "href": "WIPs/1 - Fundamentals.html#variables",
    "title": "Fundamentals",
    "section": "",
    "text": "Like language, Python has nouns and verbs. We call the nouns variables: they are the ‘things’ we manipulate with our code.\nEssentially, a variable is a named container. We access it by its name, and we get its value.\nTo create a variable, you need to choose a name and a value with name = value. For example\nexample_int = 42\nWhenever you use the variable’s name, Python will now access its value:\nexample_int\nWe can use the variables in place of the values\nexample_float = 5.678\nproduct = example_int * example_float\nproduct\n\nSpyder helps us with extra panels and features apart from the Console. To see what variables you have created, look at the “Variable explorer” tab in the top right.\n\n\n\nVariables have different types. So far, we’ve just looked at storing numbers, of which there are three types:\n\nint - integers store whole numbers, e.g. 1, 5, 1000, -3.\nfloat - floating point numbers store decimals and scientific notation, e.g. 1.5, -8.97, 4e-6.\ncomplex - complex numbers express the imaginary unit with j, e.g. z = 1+2j is \\(z = 1+2i\\).\n\nLet’s look at some other types\n\n\nEven simpler than integers is the boolean type. These are either 1 or 0 (True or False), representing a single binary unit (bit). Don’t be fooled by the words, these work like numbers: True + True gives 2.\nexample_bool = True\n\nIn Python, the boolean values True and False must begin with a capital letter.\n\n\n\n\nLet’s look at variable types which aren’t (necessarily) numbers. Sequences are variables which store multiple pieces of data. For example, strings store a sequence of characters and are created with quotation marks 'blah blah blah' or \"blah blah blah\":\nexample_string = 'This is an example of a string!'\n\n\n\nWe can also create lists, which will store several variables (not necessarily of the same type). We need to use square brackets for that:\nexample_numbers = [38, 3, 54, 17, 7]\nexample_diverse = [3, 'Hi!', 9.0]\nLists are very flexible as they can contain any number of items, and any type of data. You can even nest lists inside a list, which makes for a very flexible data type.\nOperations on sequences are a bit different to numbers. We can still use + and *, but they will concatenate (append) and duplicate, rather than perform arithmetic.\nexample_string + ' How are you?'\nexample_numbers + example_diverse\n3 * example_numbers\nHowever, depending on the variable, some operations won’t work:\nsentence + favNumber\nThere are other data types like tuples, dictionaries and sets, but we won’t look at those in this session. Here’s a summary of the ones we’ve covered:\n\n\n\n\n\n\n\n\n\n\nCategory\nType\nShort name\nExample\nGenerator\n\n\n\n\nNumeric\nInteger\nint\n3\nint()\n\n\nNumeric\nFloating Point Number\nfloat\n4.2\nfloat()\n\n\nNumeric\nBoolean\nbool\nTrue\nbool()\n\n\nSequence\nString\nstr\n'A sentence '\n\" \" or ' ' or str()\n\n\nSequence\nList\nlist\n['apple', 'banana', 'cherry']\n[ ] or list()\n\n\n\nThe generator commands are new. We use these to manually change the variable type. For example,\nint(True)\nyields 1, converting a boolean into an integer. These commands are functions, as opposed to variables - we’ll look at functions a bit later.\n\n\n\n\nWe can access part of a sequence by indexing. Sequences are ordered, starting at 0, so the first element has index 0, the second index 1, the third 2 and so on. For example, see what these commands return:\nexample_string[0]\nexample_string[6]\nexample_numbers[4]\nIf you want more than one element in a sequence, you can slice. Simple slices specify a range to slice, from the first index to the last, but not including the last. For example:\nmyList[0:4]\nThat command returns elements from position 0 up to - but not including! - position 4.",
    "crumbs": [
      "WIPs",
      "Fundamentals"
    ]
  },
  {
    "objectID": "WIPs/1 - Fundamentals.html#scripts",
    "href": "WIPs/1 - Fundamentals.html#scripts",
    "title": "Fundamentals",
    "section": "",
    "text": "So far, we’ve been working in the console, our direct line to the computer. However, it is often more convenient to use a script. These are simple text files which store code and run when we choose. They are useful to\n\nwrite code more comfortably,\nstore clearly defined steps in chronological order,\nshare a process with peers easily, and\nmake your work reproducible\n\nLet’s create a folder system to store our script in by creating a project.\n\nPress Projects &gt; New project... and name your project, perhaps “python_training”.\nCreate a new script with ctrl+N, File &gt; New file... or the new file button.\n\nYou should now see a script on the left panel in Spyder, looking something like this:\nTry typing a line of code in your new script, such as\nexample_message = \"This is an example message\"\nexample_message\nPress F9 to run each line, or ctrl+enter for the whole script. You should see something like the following appear in the console (depending on how you ran it):\nWe’ll work out of a script for the rest of the session. Don’t forget to save your script by pressing ctrl+S or the save button. )",
    "crumbs": [
      "WIPs",
      "Fundamentals"
    ]
  },
  {
    "objectID": "WIPs/1 - Fundamentals.html#functions",
    "href": "WIPs/1 - Fundamentals.html#functions",
    "title": "Fundamentals",
    "section": "",
    "text": "Functions are little programs that do specific jobs. These are the verbs of Python, because they do things to and with our variables. Here are a few examples of built-in functions:\nlen(myList)\nmin(myList)\nmax(myList)\nsum(myList)\nround(otherNumber)\nFunctions always have parentheses () after their name, and they can take one or several arguments, or none at all, depending on what they can do, and how the user wants to use them.\nHere, we use two arguments to modify the default behaviour of the round() function:\nround(otherNumber, 2)\n5.68\n\nNotice how Spyder gives you hints about the available arguments after typing the function name?\n\n\n\nOperators are a special type of function in Python with which you’re already familiar. The most important is =, which assigns values to variables. Here is a summary of some important operators, although there are many others:\n\n\n\n\n\n\n\n\n\n\n\nOperator\nFunction\nDescription\nExample command\n\n\n\n\n=\nAssignment\nAssigns values to variables\na = 7\n\n\n#\nComment\nExcludes any following text from being run\n# This text will be ignored by Python\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOperator\nFunction\nDescription\nExample command\nExample output\n\n\n\n\n+\nAddition\nAdds or concatenates values, depending on variable types\n7 + 3 or \"a\" + \"b\"\n10 or 'ab'\n\n\n-\nSubtraction\nSubtracts numerical values\n8 - 3\n5\n\n\n*\nMultiplication\nMultiplies values, depending on variable types\n7 * 2 or \"a\" * 3\n14 or 'aaa'\n\n\n/\nDivision\nDivides numerical vlues\n3 / 4\n0.75\n\n\n**\nExponentiation\nRaises a numerical value to a power\n7 ** 2\n49\n\n\n%\nRemainder\nTakes the remainder of numerical values\n13 % 7\n6\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOperator\nFunction\nDescription\nExample command\nExample output\n\n\n\n\n==\nEqual to\nChecks whether two variables are the same and outputs a boolean\n1 == 1\nTrue\n\n\n!=\nNot equal to\nChecks whether two variables are different\n'1' != 1\nTrue\n\n\n&gt;\nGreater than\nChecks whether one variable is greater than the other\n1 &gt; 1\nFalse\n\n\n&gt;=\nGreater than or equal to\nChecks whether greater than (&gt;) or equal to (==) are true\n1 &gt;= 1\nTrue\n\n\n&lt;\nLess than\nChecks whether one variable is less than the other\n0 &lt; 1\nTrue\n\n\n&lt;=\nLess than or equal to\nChecks whether less than (&lt;) or equal to (==) are true\n0 &lt;= 1\nTrue",
    "crumbs": [
      "WIPs",
      "Fundamentals"
    ]
  },
  {
    "objectID": "WIPs/1 - Fundamentals.html#finding-help",
    "href": "WIPs/1 - Fundamentals.html#finding-help",
    "title": "Fundamentals",
    "section": "",
    "text": "To find help about a function, you can use the help() function, or a ? after a function name:\nhelp(max)\nprint?\nHelp on built-in function max in module builtins:\n\nmax(...)\n    max(iterable, *[, default=obj, key=func]) -&gt; value\n    max(arg1, arg2, *args, *[, key=func]) -&gt; value\n\n    With a single iterable argument, return its biggest item. The\n    default keyword-only argument specifies an object to return if\n    the provided iterable is empty.\n    With two or more arguments, return the largest argument.\nIn Spyder, you can use the Ctrl + I keyboard shortcut to open the help in a separate pane.\n\nThe help information can often be dense and difficult to read at first, taking some practice. In the next session we look closer at interpreting this documentation, one of the most important Python skills.\n\nFor a comprehensive manual, go to the official online documentation. For questions and answers, typing the right question in a search engine will usually lead you to something helpful. If you can’t find an answer, StackOverflow is a great Q&A community.",
    "crumbs": [
      "WIPs",
      "Fundamentals"
    ]
  },
  {
    "objectID": "WIPs/1 - Fundamentals.html#modules",
    "href": "WIPs/1 - Fundamentals.html#modules",
    "title": "Fundamentals",
    "section": "",
    "text": "To do more with Python, you could write new functions from scratch, but it is easier to import extra modules to extend its capabilities. For example, to access the pi constant:\npi # throws an error: it does not exist!\nimport math # this module contains the pi constant\nmath.pi # we have to specify where it comes from\nimport math as m # give a shorter name\nm.pi\nfrom math import pi # only import what is necessary\npi\nmath is part of the “Python standard library”. You can see all the functions and constants available in the math module here: https://docs.python.org/3/library/math.html\nPython distributions like Anaconda already come with a number of useful extra modules for science.\n\n\nTo install more modules, you might need to use pip (on most systems) or conda (if you use Anaconda or Miniconda) from the command line.\nWith pip, which will fetch the module from the Python Package Index (PyPI):\npip install some-module\nWith conda, which will fetch the module from the Anaconda repository:\nconda install some-module\nRefer to the module’s website to find what is recommended.\nHere, we present a few modules that are very important for data science with Python, and which are already available in the Anaconda distribution.\n\n\n\nArrays are a data type introduced by numpy, a module with many functions useful for numerical computing.\nFor example, you can convert the list we created before to then do mathematical operations on each one of its elements:\nimport numpy as np\nexample_array = np.array(example_numbers)\nexample_array * 2\n\n\n\npandas introduces dataframes, which are often used to store two-dimensional datasets with different kinds of variables in each column. If your data is stored as a spreadsheet, you probably want to import it with a pandas function.\nHere is an example of creating a pandas dataframe from scratch, populating it by hand:\nimport pandas as pd\ndf = pd.DataFrame(columns=['Name', 'Age'])\n# populate the dataframe:\ndf.loc[1] = 'Josephine', 70\ndf.loc[2] = 'Dilsah', 38\ndf\ndf.Age # access a specific variable\n\nYou can double-click on a dataframe in the Variable explorer to explore it in a separate window.\n\n\n\n\nmatplotlib is a large collection of data visualisation functions, and pyplot is a submodule of matplotlib that contains essentials.\nimport matplotlib.pyplot as plt\nplt.plot(example_array)\nThis shows a plot in the Plots tab of Spyder.\n\nIn a Python shell, you might have to use the plt.show() command to show the plot.\n\nThe default look is a line plot that joins all the points, but we can style a plot with only a few characters:\n# blue circles\nplt.plot(example_array, 'bo')\n# green squares, dashed line:\nplt.plot(example_array, 'gs--')\nExtra arguments can be used to style further:\n# red, diamonds, solid line; change width of line and size of diamonds:\nplt.plot(example_array, 'rd-', linewidth=3, markersize=10)\nTo find out about the styling shorthand and all other arguments, look at the documentation:\nplt.plot?",
    "crumbs": [
      "WIPs",
      "Fundamentals"
    ]
  },
  {
    "objectID": "WIPs/1 - Fundamentals.html#saving-your-work",
    "href": "WIPs/1 - Fundamentals.html#saving-your-work",
    "title": "Fundamentals",
    "section": "",
    "text": "Press “Save” or Ctrl + S to save your script.\nYour project can be reopened from the “Projects” menu in Spyder.\nBy default, your variables are not saved, which is another reason why working with a script is important: you can execute the whole script in one go to get everything back. You can however save your variables as a .spydata file if you want to (for example, if it takes a lot of time to process your data).",
    "crumbs": [
      "WIPs",
      "Fundamentals"
    ]
  },
  {
    "objectID": "WIPs/1 - Fundamentals.html#summary",
    "href": "WIPs/1 - Fundamentals.html#summary",
    "title": "Fundamentals",
    "section": "",
    "text": "This morning we looked at a lot of Python features, so don’t worry if they haven’t all sunk in. Programming is best learned through practice, so keep at it! Here’s a rundown of the concepts we covered\n\n\n\n\n\n\n\nConcept\nDesctiption\n\n\n\n\nThe console vs scripts\nThe console is our window into the computer, this is where we send code directly to the computer. Scripts are files which we can write, edit, store and run code, that’s where you’ll write most of your Python.\n\n\nVariables\nVariables are the nouns of programming, this is where we store information, the objects and things of our coding. They come in different types like integers, strings and lists.\n\n\nIndexing\nIn order to access elements of a sequence variable, like a list, we need to index, e.g. example_numbers[2]. Python counts from 0.\n\n\nFunctions\nFunctions are the verbs of programming, they perform actions on our variables. Call the function by name and put inputs inside parentheses, e.g. round(2.5)\n\n\nHelp\nRunning help( ... ) will reveal the help documentation about a function or type.\n\n\nPackages\nWe can bring external code into our environment with import .... This is how we use packages, an essential for Python. Don’t forget to install the package first!",
    "crumbs": [
      "WIPs",
      "Fundamentals"
    ]
  },
  {
    "objectID": "WIPs/3 - Visualisation.html",
    "href": "WIPs/3 - Visualisation.html",
    "title": "Visualisation",
    "section": "",
    "text": "Visualisation\nIn this second workshop we will cover - Simple visualisations with matplotlib - Interactive visualisations with plotly",
    "crumbs": [
      "WIPs",
      "Visualisation"
    ]
  }
]