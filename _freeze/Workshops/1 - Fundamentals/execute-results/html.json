{
  "hash": "9c5a04ce07337a7786404fd34f25f655",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: The Fundamentals\n--- \n\nIn this first workshop we will cover\n\n- Variables\n- Functions\n- Modules\n- Importing data\n\n## Introducing Python and Spyder\n\nPython is a **programming language** that can be used to build programs (i.e. a \"general programming language\"), but it can also be used to analyse data by importing a number of useful modules.\n\nWe are using **Spyder** to interact with Python more comfortably. If you have used RStudio to interact with R before, you should feel right at home: Spyder is a program designed for doing data science with Python.\n\nPython can be used **interactively** in a console, or we can build **scripts and programs** with it, making the most out of Spyder's code editor.\n\nWe will start by using the **console** to work interactively. This is\nour direct line to the computer, and is the simplest way to run code.\nDon’t worry about any unfamiliar language, fonts or colours - we can\nignore most of it for now - all you need to know is that\n\n- `In [1]: ...` is code that we’ve sent to the computer, and\n- `Out[1]: ...` is its response.\n\n## First glance: arithmetic\n\nTo start with, we can use Python like a calculator. Type the following\n**commands** in the console, and press <kbd>Enter</kbd> to **execute**\nthem:\n\n::: {#fa416e63 .cell execution_count=1}\n``` {.python .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n2\n```\n:::\n:::\n\n\n::: {#34829300 .cell execution_count=2}\n``` {.python .cell-code}\n2 * 3\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n6\n```\n:::\n:::\n\n\n::: {#d5d0b926 .cell execution_count=3}\n``` {.python .cell-code}\n4 / 10\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n0.4\n```\n:::\n:::\n\n\n::: {#1b6e3cc8 .cell execution_count=4}\n``` {.python .cell-code}\n5 ** 2\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n25\n```\n:::\n:::\n\n\nAfter running each command, you should see the result as an output.\n\n## Variables\n\nLike language, Python has nouns and verbs. We call the nouns **variables**: they are the 'things' we manipulate with our code.\n\nEssentially, a variable is a named container. We access it by its **name**, and we get its **value**.\n\nTo create a variable, you need to choose a name and a value with `name = value`. For example\n\n::: {#721ea5e3 .cell execution_count=5}\n``` {.python .cell-code}\nexample_int = 42\n```\n:::\n\n\nWhenever you use the variable's name, Python will now access its value:\n\n::: {#50837298 .cell execution_count=6}\n``` {.python .cell-code}\nexample_int\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n42\n```\n:::\n:::\n\n\nWe can use the variables in place of the values\n\n::: {#6c374a8f .cell execution_count=7}\n``` {.python .cell-code}\nexample_float = 5.678\nproduct = example_int * example_float\nproduct\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n238.476\n```\n:::\n:::\n\n\n> Spyder helps us with extra panels and features apart from the Console. To see what variables you have created, look at the \"Variable explorer\" tab in the top right.\n\n### Types\n\nVariables have different types. So far, we've just looked at storing numbers, of which there are three types:\n\n- `int` - integers store whole numbers, e.g. `1, 5, 1000, -3`.\n- `float` - floating point numbers store decimals and scientific notation, e.g. `1.5, -8.97, 4e-6`.\n- `complex` - complex numbers express the imaginary unit with `j`, e.g. `z = 1+2j` is $z = 1+2i$.\n\nLet's look at some other types\n\n#### Booleans\n\nEven simpler than integers is the **boolean** type. These are either 1\nor 0 (True or False), representing a single binary unit (bit). Don’t be\nfooled by the words, these work like numbers: `True + True` gives `2`.\n\n::: {#4904b07e .cell execution_count=8}\n``` {.python .cell-code}\nexample_bool = True\n```\n:::\n\n\n> In Python, the boolean values `True` and `False` **must** begin with a\n> capital letter.\n\n#### Strings\n\nLet’s look at variable types which aren’t (necessarily) numbers.\n**Sequences** are variables which store multiple pieces of data. For\nexample, **strings** store a sequence of characters and are created with\nquotation marks `'blah blah blah'` or `\"blah blah blah\"`:\n\n::: {#247da82c .cell execution_count=9}\n``` {.python .cell-code}\nexample_string = 'This is an example of a string!'\n```\n:::\n\n\n#### Lists\n\nWe can also create **lists**, which will store several variables (not\nnecessarily of the same type). We need to use square brackets for that:\n\n::: {#78fbae7b .cell execution_count=10}\n``` {.python .cell-code}\nexample_numbers = [38, 3, 54, 17, 7]\nexample_diverse = [3, 'Hi!', 9.0]\n```\n:::\n\n\nLists are very flexible as they can contain any number of items, and any\ntype of data. You can even nest lists inside a list, which makes for a\nvery flexible data type.\n\nOperations on sequences are a bit different to numbers. We can still use\n`+` and `*`, but they will concatenate (append) and duplicate, rather\nthan perform arithmetic.\n\n::: {#ca7eecbd .cell execution_count=11}\n``` {.python .cell-code}\nexample_string + ' How are you?'\nexample_numbers + example_diverse\n3 * example_numbers\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n[38, 3, 54, 17, 7, 38, 3, 54, 17, 7, 38, 3, 54, 17, 7]\n```\n:::\n:::\n\n\nHowever, depending on the variable, some operations won’t work:\n\n::: {#75a30ec9 .cell execution_count=12}\n``` {.python .cell-code}\nexample_string + example_int\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg ansi-bold\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg ansi-bold\">TypeError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg ansi-bold\">In[12], line 1</span>\n<span class=\"ansi-green-fg ansi-bold\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">example_string</span><span class=\"ansi-yellow-bg\"> </span><span style=\"color:rgb(98,98,98)\" class=\"ansi-yellow-bg\">+</span><span class=\"ansi-yellow-bg\"> </span><span class=\"ansi-yellow-bg\">example_int</span>\n\n<span class=\"ansi-red-fg ansi-bold\">TypeError</span>: can only concatenate str (not \"int\") to str</pre>\n```\n:::\n\n:::\n:::\n\n\nThere are other data types like tuples, dictionaries and sets, but we\nwon’t look at those in this session. Here’s a summary of the ones we’ve\ncovered:\n\n| Category | Type | Short name | Example | Generator |\n|----|----|----|----|----|\n| Numeric | Integer | `int` | `3` | `int()` |\n| Numeric | Floating Point Number | `float` | `4.2` | `float()` |\n| Numeric | Boolean | `bool` | `True` | `bool()` |\n| Sequence | String | `str` | `'A sentence '` | `\" \"` or `' '` or `str()` |\n| Sequence | List | `list` | `['apple', 'banana', 'cherry']` | `[ ]` or `list()` |\n\nThe **generator** commands are new. We use these to manually change the\nvariable type. For example,\n\n::: {#c142c573 .cell execution_count=13}\n``` {.python .cell-code}\nint(True)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n1\n```\n:::\n:::\n\n\nyields `1`, converting a **boolean** into an **integer**. These commands\nare **functions**, as opposed to variables - we’ll look at functions a\nbit later.\n\n### Indexing\n\nWe can access part of a sequence by **indexing**. Sequences are ordered,\n**starting at 0**, so the first element has index 0, the second index 1,\nthe third 2 and so on. For example, see what these commands return:\n\n::: {#a55c95b5 .cell execution_count=14}\n``` {.python .cell-code}\nexample_string[0]\nexample_string[6]\nexample_numbers[4]\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n7\n```\n:::\n:::\n\n\nIf you want more than one element in a sequence, you can **slice**.\nSimple slices specify a range to slice, from the first index to the\nlast, **but not including the last**. For example:\n\n::: {#20179952 .cell execution_count=15}\n``` {.python .cell-code}\nexample_numbers[0:4]\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n[38, 3, 54, 17]\n```\n:::\n:::\n\n\nThat command returns elements from position 0 up to - but not\nincluding! - position 4.\n\n## Scripts\n\nSo far, we’ve been working in the console, our direct line to the\ncomputer. However, it is often more convenient to use a **script**.\nThese are simple text files which store code and run when we choose.\nThey are useful to\n\n- write code more comfortably,\n- store clearly defined steps in chronological order,\n- share a process with peers easily, and\n- make your work reproducible\n\nLet’s create a folder system to store our script in by creating a\n**project**.\n\n- Press `Projects > New project...` and name your project,\nperhaps “python_training”.\n- Create a new script with\n<kbd>ctrl</kbd>+<kbd>N</kbd>, `File > New file...` or the new file\nbutton.\n\nYou should now see a script on the left panel in Spyder, looking\nsomething like this:\n\nTry typing a line of code in your new script, such as\n\n::: {#879a0b13 .cell execution_count=16}\n``` {.python .cell-code}\nexample_message = \"This is an example message\"\nexample_message\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n'This is an example message'\n```\n:::\n:::\n\n\nPress <kbd>F9</kbd> to run each line, or\n<kbd>ctrl</kbd>+<kbd>enter</kbd> for the whole script. You should see\nsomething like the following appear in the **console** (depending on how\nyou ran it):\n\nWe’ll work out of a script for the rest of the session. Don’t forget to\nsave your script by pressing <kbd>ctrl</kbd>+<kbd>S</kbd> or the save\nbutton.\n)\n\n## Functions\n\n**Functions** are little programs that do specific jobs. These are the\nverbs of Python, because they do things to and with our variables. Here\nare a few examples of built-in functions:\n\n::: {#dd8ce62a .cell execution_count=17}\n``` {.python .cell-code}\nlen(example_numbers)\nmin(example_numbers)\nmax(example_numbers)\nsum(example_numbers)\nround(example_float)\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n6\n```\n:::\n:::\n\n\nFunctions always have parentheses () after their name, and they can take\none or several **arguments**, or none at all, depending on what they can\ndo, and how the user wants to use them.\n\nHere, we use two arguments to modify the default behaviour of the\n`round()` function:\n\n::: {#f73261e9 .cell execution_count=18}\n``` {.python .cell-code}\nround(example_float, 2)\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n5.68\n```\n:::\n:::\n\n\n> Notice how Spyder gives you hints about the available arguments after\n> typing the function name?\n\n### Operators\n\nOperators are a special type of function in Python with which you’re\nalready familiar. The most important is `=`, which assigns values to\nvariables. Here is a summary of some important operators, although there\nare many others:\n\n#### General\n\n| Operator | Function | Description | Example command |\n|----|----|----|----|\n| `=` | Assignment | Assigns values to variables | `a = 7` |\n| `#` | Comment | Excludes any following text from being run | `# This text will be ignored by Python` |\n\n#### Mathematical\n\n| Operator | Function | Description | Example command | Example output |\n|----|----|----|----|----|\n| `+` | Addition | Adds or concatenates values, depending on variable types | `7 + 3` or `\"a\" + \"b\"` | `10` or `'ab'` |\n| `-` | Subtraction | Subtracts numerical values | `8 - 3` | `5` |\n| `*` | Multiplication | Multiplies values, depending on variable types | `7 * 2` or `\"a\" * 3` | `14` or `'aaa'` |\n| `**` | Exponentiation | Raises a numerical value to a power | `7 ** 2` | `49` |\n| `/` | Division | Divides numerical values | `3 / 4` | `0.75` |\n| `//` | Floor division | Divides numerical values and then rounds down | `3 // 4` | `0` | \n| `%` | Remainder | Takes the remainder of numerical values | `13 % 7` | `6` |\n\n#### Comparison\n\n| Operator | Function | Description | Example command | Example output |\n|----|----|----|----|----|\n| `==` | Equal to | Checks whether two variables are the same and outputs a boolean | `1 == 1` | `True` |\n| `!=` | Not equal to | Checks whether two variables are different | `'1' != 1` | `True` |\n| `>` | Greater than | Checks whether one variable is greater than the other | `1 > 1` | `False` |\n| `>=` | Greater than or equal to | Checks whether greater than (\\>) or equal to (==) are true | `1 >= 1` | `True` |\n| `<` | Less than | Checks whether one variable is less than the other | `0 < 1` | `True` |\n| `<=` | Less than or equal to | Checks whether less than (\\<) or equal to (==) are true | `0 <= 1` | `True` |\n\n## Finding help\n\nTo find help about a function, you can use the `help()` function, or a\n`?` after a function name:\n\n::: {#381d4d01 .cell execution_count=19}\n``` {.python .cell-code}\nhelp(max)\nprint?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHelp on built-in function max in module builtins:\n\nmax(...)\n    max(iterable, *[, default=obj, key=func]) -> value\n    max(arg1, arg2, *args, *[, key=func]) -> value\n\n    With a single iterable argument, return its biggest item. The\n    default keyword-only argument specifies an object to return if\n    the provided iterable is empty.\n    With two or more arguments, return the largest argument.\n\n```\n:::\n:::\n\n\nIn Spyder, you can use the <kbd>Ctrl</kbd> + <kbd>I</kbd> keyboard\nshortcut to open the help in a separate pane.\n\nFor a comprehensive manual, go to the [official online\ndocumentation](https://docs.python.org/). For questions and answers,\ntyping the right question in a search engine will usually lead you to\nsomething helpful. If you can’t find an answer, [StackOverflow is a\ngreat Q&A community](https://stackoverflow.com/questions/tagged/python).\n\n## Modules\n\nPython, on its own, requires a lot of manual programming for advanced tasks. What makes it versatile is the capacity to use **other people's code** with modules.\n\nTo bring in advanced variables and functions that other's have made, we need to import the module. For example\n\n::: {#7772f7d2 .cell execution_count=20}\n``` {.python .cell-code}\npi\n```\n\n::: {.cell-output .cell-output-error}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-red-fg ansi-bold\">---------------------------------------------------------------------------</span>\n<span class=\"ansi-red-fg ansi-bold\">NameError</span>                                 Traceback (most recent call last)\nCell <span class=\"ansi-green-fg ansi-bold\">In[20], line 1</span>\n<span class=\"ansi-green-fg ansi-bold\">----&gt; 1</span> <span class=\"ansi-yellow-bg\">pi</span>\n\n<span class=\"ansi-red-fg ansi-bold\">NameError</span>: name 'pi' is not defined</pre>\n```\n:::\n\n:::\n:::\n\n\nreturns an error, because it's undefined. But the `math` module contains a variable called `pi`:\n\n::: {#161f1585 .cell execution_count=21}\n``` {.python .cell-code}\nimport math\nmath.pi\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n3.141592653589793\n```\n:::\n:::\n\n\n> To access objects from within a module, we use a full stop: `module.object_inside`.\n\n### NumPy for arrays\n\nArrays are a data type introduced by `numpy`, a module with many functions useful for numerical computing.\n\nFor example, you can convert the list we created before to then do mathematical operations on each one of its elements:\n\n::: {#f986b0e8 .cell execution_count=22}\n``` {.python .cell-code}\nimport numpy as np\nexample_array = np.array(example_numbers)\nexample_array * 2\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\narray([ 76,   6, 108,  34,  14])\n```\n:::\n:::\n\n\n### Pandas for dataframes\n\n`pandas` introduces dataframes, which are often used to store two-dimensional datasets with different kinds of variables in each column. If your data is stored as a spreadsheet, you probably want to import it with a pandas function.\n\nFirst, we'll need to install and import the `pandas` module. Install it as before (either with `pip` or `conda`), and then run\n\n::: {#517472a1 .cell execution_count=23}\n``` {.python .cell-code}\nimport pandas as pd\n```\n:::\n\n\nNow, let's import some data to get ready for the next session. \n\n1. Create a new folder in your project called `data`\n1. [Download the Players2024.csv](../data_sources/Players2024.csv) file\n1. Move it into your new `data` folder\n1. Use the function `pd.read_csv()` to load the data:\n\n::: {#d669baf8 .cell execution_count=24}\n``` {.python .cell-code}\ndf = pd.read_csv(\"data/Players2024.csv\")\n```\n:::\n\n\n\n\nYou'll see that it's now in your variable explorer. You can double-click on a dataframe in the Variable explorer to explore it in a separate window.\n\nWe'll look at manipulating these dataframe objects in the next session. For now, try running the `df.head()` function to examine the first few rows:\n\n::: {#15ea1394 .cell execution_count=26}\n``` {.python .cell-code}\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>birth_date</th>\n      <th>height_cm</th>\n      <th>positions</th>\n      <th>nationality</th>\n      <th>age</th>\n      <th>club</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>James Milner</td>\n      <td>1986-01-04</td>\n      <td>175.0</td>\n      <td>Midfield</td>\n      <td>England</td>\n      <td>38</td>\n      <td>Brighton and Hove Albion Football Club</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Anastasios Tsokanis</td>\n      <td>1991-05-02</td>\n      <td>176.0</td>\n      <td>Midfield</td>\n      <td>Greece</td>\n      <td>33</td>\n      <td>Volou Neos Podosferikos Syllogos</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Jonas Hofmann</td>\n      <td>1992-07-14</td>\n      <td>176.0</td>\n      <td>Midfield</td>\n      <td>Germany</td>\n      <td>32</td>\n      <td>Bayer 04 Leverkusen Fußball</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Pepe Reina</td>\n      <td>1982-08-31</td>\n      <td>188.0</td>\n      <td>Goalkeeper</td>\n      <td>Spain</td>\n      <td>42</td>\n      <td>Calcio Como</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Lionel Carole</td>\n      <td>1991-04-12</td>\n      <td>180.0</td>\n      <td>Defender</td>\n      <td>France</td>\n      <td>33</td>\n      <td>Kayserispor Kulübü</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Matplotlib for visualisation\n\n`matplotlib` is a large collection of data visualisation functions, and `pyplot` is a submodule of `matplotlib` that contains essentials.\n\n::: {#ae16ca83 .cell execution_count=27}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nplt.plot(example_array)\n```\n\n::: {.cell-output .cell-output-display}\n![](1 - Fundamentals_files/figure-html/cell-28-output-1.png){width=566 height=411}\n:::\n:::\n\n\nThis shows a plot in the Plots tab of Spyder.\n\n::: {.callout-warning collapse=\"true\"}\n# Plots not appearing\n\nIf your plots aren't appearing, then it might be due to a known bug. The latest versions of Spyder and matplotlib solve the problem, but we can apply a fix locally for now.\n\n**Step 1.**\n\nCheck that it's not a different issue. If you see *any* error message, **then this bug is not the problem** - you should solve the error first.\n\nAssuming there is no error message, this bug is featuring if\n\n- The plot is not appearing, and\n- The console has this output:\n\n```bash\n<seaborn.axisgrid.FacetGrid at 0x1e80c2e94f0>\n```\n\nTo apply a quick fix (and ensure that the plots are otherwise ok), try running\n\n```python\nplt.show()\n```\n\nThis won't fix the problem, but it will let you manually see the plots.\n\n**Step 2.**\n\nBefore you try to fix the issue manually, updating Spyder to the latest version should solve the issue.\n\n1. Save your work and close Spyder\n2. Open the Anaconda Navigator\n3. Press the settings button **on the Spyder pane**\n4. Press \"Update Application\"\n\nOnce it's done, relaunch Spyder and give it a go.\n\n**Step 3.**\n\nThere are three ways which might fix the bug if you can't update Spyder. The first is to run\n\n```python\nplt.ion()\n```\n\nTry running the plot again. If it works, great!\n\nIf it doesn't work, try\n\n```python\nimport matplotlib as mpl\nmpl.rcParams[\"backend\"] = \"agg\"\n```\n\nIf *that* doesn't work, then you should adjust your Spyder settings.\n\n1. Go to Tools > Preferences > IPython Console > Graphics\n2. Under \"Graphics Backend\" change the setting to \"Automatic\"\n\nTry running your plots again. \n\n**Step 4.**\nIf they *still* aren't working, then ask a trainer for assistance.\n:::\n\nThe default look is a line plot that joins all the points, but we can style a plot with only a few characters:\n\n::: {#eb62891b .cell execution_count=28}\n``` {.python .cell-code}\n# blue circles\nplt.plot(example_array, 'bo')\n\n# green squares, dashed line:\nplt.plot(example_array, 'gs--')\n```\n\n::: {.cell-output .cell-output-display}\n![](1 - Fundamentals_files/figure-html/cell-29-output-1.png){width=566 height=411}\n:::\n:::\n\n\nExtra arguments can be used to style further:\n\n::: {#1b45b5f9 .cell execution_count=29}\n``` {.python .cell-code}\n# red, diamonds, solid line; change width of line and size of diamonds:\nplt.plot(example_array, 'rd-', linewidth=3, markersize=10)\n```\n\n::: {.cell-output .cell-output-display}\n![](1 - Fundamentals_files/figure-html/cell-30-output-1.png){width=566 height=411}\n:::\n:::\n\n\nTo find out about the styling shorthand and all other arguments, look at the documentation:\n\n::: {#d52469c6 .cell execution_count=30}\n``` {.python .cell-code}\nplt.plot?\n```\n:::\n\n\n### Installing modules that aren't built in\n\nThe math module is **built-in** - the module came when I installed Python, and the numpy, pandas and matplotlib come with conda installations. Most other modules live online, so we need to download and install them first.\n\nInstalling modules depends on whether you have a conda environment or not. To check, run\n\n::: {#d3b93dd8 .cell execution_count=31}\n``` {.python .cell-code}\nconda\n```\n:::\n\n\n|Message | conda Environment?|\n|--- | ---|\n|`conda is a tool for managing and deployi...` or something similar  | **Yes**|\n|`NameError: name 'conda' is not defined` | **No**|\n\n#### If you have a conda environment\n\nYou can install packages with\n\n::: {#0090e67b .cell execution_count=32}\n``` {.python .cell-code}\nconda install package_name\n```\n:::\n\n\n> You likely have a conda environment if you installed Anaconda or you installed Spyder 6 (Since Oct 2024)\n\n#### If you do not have a conda environment\n\nYou can install packages with\n\n::: {#1eb7f4e7 .cell execution_count=33}\n``` {.python .cell-code}\npip install package_name\n```\n:::\n\n\n> You likely have a pip environment if you installed Python manually or are using an older (before Oct 2024) version of Spyder (e.g. Spyder 5) \n\n### Plotly Express for interactive visualisations\n\nOne module that isn't built-in is **plotly**, which we can use for interactive visualisations.\n\n::: {#2f000f10 .cell execution_count=34}\n``` {.python .cell-code}\nimport plotly.io as pio\nimport plotly.express as px\n\n# Set renderer\npio.renderers.default='browser'\n\n# Create bar plot\npx.histogram(df, x = \"age\", color = \"positions\")\n```\n:::\n\n\n::: {#f797506a .cell execution_count=35}\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"7d86374d-a030-4cfb-81a2-81893bdb2570\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"7d86374d-a030-4cfb-81a2-81893bdb2570\")) {                    Plotly.newPlot(                        \"7d86374d-a030-4cfb-81a2-81893bdb2570\",                        [{\"alignmentgroup\":\"True\",\"bingroup\":\"x\",\"hovertemplate\":\"positions=Midfield\\u003cbr\\u003eage=%{x}\\u003cbr\\u003ecount=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"Midfield\",\"marker\":{\"color\":\"#636efa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"Midfield\",\"offsetgroup\":\"Midfield\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[38,33,32,38,39,38,36,37,37,38,36,40,35,40,36,36,34,33,33,34,30,34,33,34,37,34,35,35,32,36,32,35,32,34,35,34,35,35,33,32,34,34,32,36,36,32,36,34,34,35,33,34,34,33,32,34,33,33,32,33,33,36,31,34,31,30,32,32,32,32,33,35,31,32,33,29,31,31,30,33,31,32,38,32,33,32,35,34,32,33,30,32,30,30,30,31,31,34,31,33,33,33,30,34,31,33,30,35,31,34,32,33,31,31,33,34,30,32,33,33,30,29,33,30,32,35,31,31,32,30,30,36,31,30,31,31,33,31,31,32,31,31,30,30,29,30,31,29,29,29,30,30,31,30,29,31,30,33,31,35,30,31,29,31,31,30,30,29,30,30,30,31,31,31,29,29,29,29,29,29,38,31,30,31,29,32,30,32,30,30,30,29,29,30,28,34,34,33,30,30,29,32,29,31,29,30,30,29,29,29,31,29,31,31,28,31,29,31,28,31,34,29,30,32,31,27,30,31,28,28,31,28,29,29,29,32,29,29,29,28,29,29,30,29,29,30,30,31,31,32,28,29,28,29,29,28,29,32,28,29,29,29,30,29,30,27,31,28,32,28,33,30,30,30,27,32,30,30,29,29,37,30,29,30,29,28,32,31,31,30,31,29,34,31,28,29,32,28,27,27,28,28,28,30,30,29,28,28,27,32,28,28,29,31,32,30,28,31,31,27,29,27,30,29,30,29,29,31,29,27,29,28,29,30,27,27,27,28,28,28,30,32,27,28,28,27,28,27,26,29,28,29,28,28,27,28,27,28,27,27,26,28,29,27,26,26,26,28,28,31,29,29,30,27,31,28,31,29,27,29,30,29,27,27,27,27,29,27,27,27,29,29,30,28,28,26,28,28,28,28,26,28,26,29,26,30,26,28,29,29,28,30,30,29,31,27,27,26,28,28,28,29,26,29,27,32,31,29,26,30,25,29,29,29,25,30,28,27,29,26,26,29,28,27,28,27,28,27,27,29,28,26,27,29,29,29,28,31,29,28,27,27,26,26,29,31,27,28,27,27,27,28,28,25,25,28,26,31,29,27,31,30,29,27,28,27,29,28,29,27,26,32,25,26,26,26,31,26,28,26,25,27,25,26,26,28,28,28,28,28,28,27,27,28,25,30,27,25,27,29,25,26,26,26,27,29,26,29,25,27,33,28,30,27,25,25,28,26,25,26,29,26,28,26,26,27,27,27,29,24,24,25,26,27,26,27,26,25,28,25,27,25,25,25,26,27,25,25,27,24,30,25,27,26,26,26,26,25,26,26,25,27,27,25,26,25,25,26,24,27,30,28,28,28,27,26,28,25,29,28,30,25,27,26,28,27,27,30,26,27,28,27,25,25,24,25,25,28,24,24,28,27,26,26,24,24,24,24,27,26,26,27,30,28,24,27,25,26,26,26,26,28,27,24,26,24,24,25,24,27,26,27,26,27,24,24,24,26,26,30,32,26,27,31,25,28,24,26,28,28,24,24,26,24,25,25,26,26,28,27,26,24,27,28,26,24,25,24,26,24,26,25,25,25,24,24,25,25,24,25,27,24,25,24,26,24,24,24,24,26,26,25,26,26,21,24,26,25,26,25,26,25,27,25,24,24,26,27,26,25,26,26,26,24,24,25,23,23,23,23,23,23,24,23,25,29,25,31,25,28,25,33,24,23,24,23,25,29,28,24,26,25,26,26,24,27,24,25,26,24,24,26,25,23,26,24,23,23,26,25,25,26,23,26,26,26,25,28,24,25,26,24,27,24,24,26,24,23,24,22,23,23,22,22,23,24,24,23,24,26,23,26,30,24,24,26,30,24,28,28,29,24,23,28,24,26,25,24,26,24,25,26,26,27,28,26,27,25,27,23,28,23,25,23,27,25,26,24,23,26,26,25,24,26,24,25,25,23,23,23,28,24,24,25,27,23,23,22,22,22,24,23,23,25,28,25,26,27,26,22,23,25,23,23,27,24,25,26,26,23,27,25,22,26,25,26,26,27,23,22,23,23,23,24,26,23,24,23,22,23,25,22,22,22,23,22,24,25,24,25,23,23,26,30,24,25,27,24,24,27,23,26,23,26,28,24,22,25,22,23,23,23,22,22,22,22,22,22,23,23,23,22,21,22,22,22,21,29,26,23,23,23,25,28,23,22,23,22,23,24,27,27,24,22,24,26,30,23,26,26,24,30,24,28,25,24,25,25,24,28,29,28,25,25,30,22,30,24,27,27,23,22,23,24,23,23,27,23,21,25,22,24,28,25,22,24,26,24,23,24,24,24,25,22,22,22,22,23,22,24,23,26,24,24,24,23,22,27,21,22,22,23,26,28,27,25,20,22,26,22,21,23,26,24,23,23,22,21,21,26,25,22,25,22,24,21,21,21,21,21,24,21,28,22,23,21,22,21,22,21,22,20,22,23,22,22,23,25,26,24,24,24,21,24,23,23,23,24,21,22,21,24,23,22,22,22,21,21,21,25,21,21,23,20,21,24,21,26,26,23,21,20,22,24,24,24,24,24,22,23,21,22,23,21,23,26,25,25,26,22,25,22,20,25,25,24,21,21,26,22,22,26,22,24,20,24,22,21,21,22,25,22,22,23,22,22,22,22,21,21,22,21,21,23,21,24,22,22,24,21,24,21,24,22,23,24,22,22,23,23,23,22,23,23,23,23,23,24,22,23,22,23,21,22,21,21,20,23,21,20,21,21,24,24,22,22,23,26,23,21,21,21,21,25,21,21,27,21,24,21,23,25,23,26,19,23,23,23,20,24,20,20,22,19,23,25,21,24,20,20,20,22,21,27,24,25,23,23,23,25,22,23,24,23,23,20,21,21,20,23,20,21,22,22,21,21,20,23,22,22,24,21,22,20,23,20,23,20,20,20,19,21,20,25,23,21,26,25,23,25,21,23,25,23,21,19,20,20,22,21,21,22,22,22,20,20,25,27,21,21,22,22,20,23,20,24,23,21,22,21,20,23,25,22,25,21,23,22,24,20,22,22,25,22,22,21,22,21,21,20,19,19,21,20,20,19,20,23,20,20,23,22,21,19,19,21,20,20,22,20,21,21,21,20,19,19,20,25,20,24,21,23,20,21,21,23,23,21,21,19,22,19,20,22,20,20,20,20,20,20,20,21,22,22,20,19,20,21,22,19,24,21,25,21,24,20,23,23,20,20,22,20,20,21,19,29,19,24,20,22,23,26,21,19,21,19,18,23,20,21,29,21,22,21,19,24,20,20,22,20,19,19,22,21,21,19,22,22,18,19,20,21,20,21,21,20,19,20,20,22,18,18,23,25,19,19,21,20,19,20,23,22,25,24,21,21,22,21,21,21,24,22,19,23,21,21,22,21,21,23,24,21,18,22,20,22,19,18,21,20,20,21,21,20,19,20,20,24,20,19,19,18,18,21,17,21,23,20,22,19,23,18,18,18,23,23,21,20,17,18,22,22,21,22,26,19,18,22,21,19,21,20,22,18,18,19,21,20,20,18,20,19,18,18,21,19,19,21,19,20,20,19,19,19,22,20,19,19,18,20,17,17,20,20,19,18,19,20,20,19,18,17,17,23,19,17,24,20,19,22,19,21,19,20,19,19,22,18,19,21,22,16,19,18,18,19,18,21,19,19,18,19,17,18,20,21,19,20,20,20,20,17,20,21,17,20,17,18,20,18,18,19,19,19,18,23,18,21,20,19,20,19,18,19,19,19,21,19,17,20,20,19,21,19,19,19,20,18,19,21,17,20,19,18,17,19,18],\"xaxis\":\"x\",\"yaxis\":\"y\",\"type\":\"histogram\"},{\"alignmentgroup\":\"True\",\"bingroup\":\"x\",\"hovertemplate\":\"positions=Goalkeeper\\u003cbr\\u003eage=%{x}\\u003cbr\\u003ecount=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"Goalkeeper\",\"marker\":{\"color\":\"#EF553B\",\"pattern\":{\"shape\":\"\"}},\"name\":\"Goalkeeper\",\"offsetgroup\":\"Goalkeeper\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[42,41,41,37,30,39,38,37,38,37,39,41,39,37,40,40,37,38,36,39,39,37,38,36,37,36,36,37,38,34,36,36,36,36,35,33,33,37,34,36,34,37,34,35,36,35,36,36,36,35,34,34,34,33,38,33,35,33,34,34,35,33,38,34,37,33,31,37,36,32,34,34,32,35,34,34,33,34,34,32,33,31,33,31,31,32,31,35,34,34,35,33,34,33,32,31,32,34,34,34,32,34,31,32,32,32,31,31,30,32,32,34,33,30,31,32,33,31,33,31,34,31,31,30,35,33,31,34,33,33,31,32,33,31,31,32,32,30,31,30,31,31,31,30,32,35,33,32,32,33,31,32,32,30,32,34,32,30,29,30,30,29,32,31,30,31,29,28,34,34,31,32,33,33,36,29,30,29,28,29,29,31,29,32,32,30,32,28,30,28,31,28,32,32,28,30,29,28,30,29,30,32,31,31,29,30,30,29,29,30,30,27,28,28,29,29,29,30,29,28,29,29,27,31,28,31,33,36,32,28,31,30,28,30,30,28,30,29,28,27,29,30,28,30,29,29,26,30,28,31,30,31,31,27,28,26,26,27,31,27,27,26,28,27,27,32,28,27,27,29,27,30,27,28,30,30,28,28,27,26,25,29,26,30,26,26,28,27,32,29,29,27,26,28,28,29,30,28,31,27,26,28,25,29,31,27,27,28,28,27,27,27,27,26,28,28,27,26,26,26,25,23,27,25,26,26,25,26,25,27,27,27,26,26,24,26,24,29,25,25,25,25,27,26,25,27,25,27,25,24,25,24,26,28,25,27,25,25,25,25,25,29,30,25,24,24,25,24,26,24,25,26,26,30,25,24,30,26,26,29,32,25,26,26,24,25,23,24,27,27,28,27,24,26,29,26,26,24,25,25,23,23,23,27,22,26,27,23,28,24,34,25,23,26,30,24,26,25,26,23,24,25,25,22,23,26,26,25,26,28,24,23,27,23,23,23,29,25,26,23,23,24,22,25,28,22,24,24,27,24,24,26,24,23,25,22,23,24,25,25,23,25,24,24,25,23,23,24,23,23,22,22,23,23,22,22,22,23,24,24,22,26,23,23,23,24,22,22,28,24,25,22,28,26,25,22,26,21,23,25,20,24,24,26,25,22,23,23,23,25,24,25,23,22,21,23,23,23,22,23,22,26,24,25,22,21,22,21,20,22,21,21,23,24,23,22,21,22,24,22,22,23,23,21,22,24,22,22,24,21,24,24,22,22,25,21,25,21,23,21,21,22,21,25,24,22,22,20,22,23,23,23,23,26,22,23,21,21,20,20,21,22,21,22,19,20,26,20,22,19,23,19,20,22,24,23,20,21,21,21,19,20,22,22,22,21,19,20,20,20,21,20,21,22,23,19,21,19,24,22,20,20,20,21,19,21,19,19,21,21,22,22,21,22,24,21,23,19,21,19,18,19,18,20,21,20,19,20,23,20,20,19,22,19,21,23,19,19,20,21,19,21,20,19,19,19,18,19,20,17,22,19,18,19,20,21,20,20,19,20,18,21,19,20,18,21,24,19,20,19,20,18,21,18,18,19,21,21,17,19,20,19,18,18,18,17,19,18,20,21,19,18,20,20,16,18,19,20,17,17,16,18,17,15],\"xaxis\":\"x\",\"yaxis\":\"y\",\"type\":\"histogram\"},{\"alignmentgroup\":\"True\",\"bingroup\":\"x\",\"hovertemplate\":\"positions=Defender\\u003cbr\\u003eage=%{x}\\u003cbr\\u003ecount=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"Defender\",\"marker\":{\"color\":\"#00cc96\",\"pattern\":{\"shape\":\"\"}},\"name\":\"Defender\",\"offsetgroup\":\"Defender\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[33,34,39,39,38,38,32,36,40,35,35,31,36,35,36,36,35,36,37,33,35,33,35,34,36,36,36,36,34,34,36,36,36,36,35,37,32,35,32,32,32,37,32,36,38,35,34,33,32,34,34,35,33,33,32,35,34,34,32,34,32,35,35,33,37,33,34,33,35,33,32,33,34,33,35,33,36,33,32,32,32,32,31,31,32,33,36,33,31,31,33,35,34,34,34,32,35,35,32,31,31,31,33,31,33,34,34,32,35,32,33,33,32,33,33,33,33,34,32,32,33,33,33,33,32,34,32,32,32,32,31,34,32,34,33,32,32,34,30,29,31,31,32,29,30,31,32,33,33,34,34,33,30,30,32,33,34,33,33,30,31,33,31,31,31,33,30,31,33,35,30,33,31,33,36,32,30,31,31,31,30,29,32,32,32,32,31,31,30,30,31,31,31,33,32,33,37,31,32,32,31,31,33,32,34,31,32,31,27,31,31,32,34,33,32,32,32,32,30,30,33,30,33,32,26,30,32,30,33,30,35,31,30,29,29,32,30,30,29,30,31,30,31,29,31,31,29,30,31,31,33,29,28,31,32,32,30,31,31,31,32,29,36,30,30,31,32,30,31,32,32,36,31,33,31,30,32,30,30,31,29,31,30,31,30,32,30,30,30,30,33,31,29,29,31,34,29,30,29,30,31,30,30,30,31,32,30,31,31,30,31,29,31,32,31,30,30,29,29,28,31,31,28,28,31,28,29,31,30,28,29,32,28,31,28,28,29,28,32,29,29,26,29,30,30,37,30,29,30,33,31,29,27,31,30,28,31,27,28,29,29,29,29,29,29,28,29,29,30,33,32,27,31,30,27,30,29,29,29,28,28,30,29,30,28,31,30,31,27,29,29,29,31,30,30,30,33,29,30,28,29,27,30,30,30,28,30,27,27,27,30,31,28,30,31,31,30,30,29,32,28,30,29,29,28,30,28,31,30,32,28,29,27,32,28,28,30,30,30,33,28,30,31,28,27,30,30,28,28,28,30,28,30,33,29,27,28,31,28,28,29,28,28,28,28,31,27,27,29,30,28,29,29,29,29,30,29,28,27,27,27,27,27,27,29,30,31,29,29,27,29,31,28,28,27,27,28,22,29,30,30,30,28,28,27,27,27,27,27,27,29,33,28,28,28,28,27,28,29,32,26,26,30,28,29,30,27,30,29,27,28,28,31,30,29,27,30,26,30,28,28,28,27,26,26,32,29,33,27,26,30,29,30,28,28,33,27,28,29,28,28,29,27,28,29,27,26,27,29,27,27,27,27,33,27,27,30,29,29,26,29,33,27,26,27,30,29,30,27,28,27,26,27,28,30,28,28,30,28,28,30,25,31,30,29,28,27,28,31,29,31,28,27,27,26,27,26,27,30,27,28,30,27,28,28,32,25,30,28,32,26,27,27,28,26,26,28,25,29,33,31,32,28,29,30,32,32,28,26,25,26,26,26,26,26,26,26,26,25,27,26,26,27,27,30,28,26,25,26,27,28,26,23,24,26,26,28,25,28,26,29,26,26,28,27,26,25,25,28,31,26,26,26,27,30,28,30,28,28,27,27,28,23,29,26,24,26,28,27,25,25,25,26,24,25,25,27,30,27,27,26,26,26,27,26,27,28,27,27,27,26,27,24,25,28,28,28,27,27,28,26,26,29,25,25,26,29,32,25,26,26,27,27,25,25,25,27,26,24,24,25,25,27,25,24,25,25,25,26,27,25,24,26,28,27,27,30,27,31,28,27,28,23,27,26,25,25,29,26,25,29,28,25,26,26,27,27,26,28,29,28,26,25,25,25,24,29,24,24,29,30,29,26,26,24,24,24,23,24,25,24,25,28,25,28,26,29,25,28,26,25,25,26,27,29,30,25,25,26,24,25,30,24,27,25,27,27,27,27,27,26,24,24,24,25,25,24,28,25,25,26,25,28,27,25,24,29,28,25,26,27,24,24,29,31,30,29,26,25,30,24,27,28,27,25,29,26,26,25,26,27,27,25,24,26,24,31,24,23,26,26,24,26,25,27,25,28,24,24,25,24,24,23,24,24,25,25,25,27,23,26,24,26,26,27,25,26,26,27,27,26,26,24,25,27,26,26,24,26,25,26,27,27,27,24,24,26,25,25,25,28,24,25,26,23,26,25,26,25,26,25,25,27,23,23,25,26,26,26,26,27,27,26,23,24,24,24,24,24,23,24,26,25,25,25,25,26,24,22,26,23,26,27,24,26,25,26,25,31,23,26,24,24,28,24,25,25,23,24,28,26,23,23,31,25,28,27,25,27,26,26,27,28,23,24,31,25,26,24,23,24,27,29,28,26,25,25,29,22,25,25,26,23,27,26,27,27,22,24,24,26,26,26,25,24,24,25,25,26,25,25,26,25,25,23,23,25,24,25,26,25,24,23,23,23,23,24,23,24,23,23,24,23,23,23,23,24,25,25,22,24,24,23,24,24,27,27,24,28,24,26,26,24,23,24,25,25,24,23,23,24,22,23,26,23,25,23,26,25,26,26,23,23,23,23,23,22,24,23,24,24,27,23,23,24,22,22,22,22,25,24,25,22,23,24,22,25,26,26,22,22,24,23,24,24,24,24,25,23,28,28,26,22,24,24,25,24,24,23,24,24,22,24,24,27,25,26,24,23,26,22,23,22,25,27,22,23,21,22,21,22,22,22,24,21,24,23,23,22,22,26,27,25,31,23,24,22,29,24,23,22,25,23,23,25,25,28,28,23,27,29,22,22,28,25,27,23,26,24,23,27,25,25,21,28,30,25,27,23,22,25,26,23,22,22,23,25,25,25,23,26,25,25,24,23,28,23,24,24,27,24,25,23,24,26,23,24,22,22,23,25,22,23,23,32,25,23,23,22,23,23,24,25,22,26,26,23,23,22,24,23,23,20,21,24,22,23,22,22,27,22,26,25,24,24,25,22,22,23,21,27,21,23,22,21,25,23,22,25,26,21,25,22,21,21,25,22,23,25,21,22,25,22,22,22,22,24,23,23,29,21,24,20,23,23,24,23,23,23,24,25,27,21,24,22,25,23,23,24,22,22,22,21,23,26,23,29,22,25,24,23,22,26,24,23,25,24,23,22,24,21,24,24,21,21,25,22,23,24,26,23,23,23,20,24,22,24,25,23,21,26,23,22,24,20,22,25,25,27,21,22,21,24,24,22,21,25,24,21,23,27,23,21,24,24,21,22,23,22,23,22,21,20,23,24,23,22,23,24,23,24,21,24,22,21,24,21,23,24,24,24,21,21,22,22,23,21,22,21,21,23,23,22,21,23,21,20,20,24,25,25,25,22,21,23,21,22,21,25,21,22,23,24,21,20,21,23,22,20,26,20,20,20,25,22,28,21,21,21,23,20,23,21,20,20,20,20,23,24,20,23,22,24,22,22,21,23,20,23,23,23,21,22,22,22,23,20,20,22,21,21,20,23,20,27,23,24,22,22,20,22,21,20,22,22,22,22,21,22,24,24,22,23,21,20,21,21,20,24,20,20,21,19,22,21,23,21,25,25,24,23,27,20,24,24,22,23,21,23,26,21,21,24,23,19,21,21,24,21,20,19,22,20,22,25,22,19,22,23,21,19,25,21,25,23,21,26,25,23,22,22,22,21,22,21,23,22,21,21,20,21,21,21,19,20,22,23,22,24,21,24,24,21,22,19,24,23,20,20,21,20,19,22,20,22,20,21,19,21,21,23,20,22,21,22,20,21,23,24,20,25,21,21,26,26,20,20,21,19,21,20,24,19,20,20,19,19,19,20,21,22,21,25,19,21,21,19,19,20,20,23,23,21,25,22,20,18,22,22,22,22,20,21,25,19,20,20,23,19,27,23,21,20,19,24,21,19,22,21,19,20,21,21,22,24,22,24,21,22,22,22,20,22,22,21,20,23,20,22,21,20,23,21,20,21,22,21,23,21,19,20,21,23,21,19,19,24,23,23,22,23,21,21,25,27,19,21,23,18,20,25,23,20,21,20,19,21,21,19,21,18,22,22,20,22,21,19,20,20,21,20,22,23,20,19,19,23,21,18,20,22,20,21,19,20,24,21,20,17,20,20,18,19,19,18,22,20,23,19,18,19,20,22,19,20,20,19,21,19,19,19,20,19,22,19,18,19,17,19,21,20,18,21,20,21,19,19,19,21,18,18,22,18,22,21,19,20,19,20,20,22,19,18,22,18,18,18,19,21,21,20,20,21,17,17,21,21,20,20,20,23,17,19,19,23,16,20,18,19,22,21,18,19,20,21,18,18,20,20,18,19,20,18,19,18,20,19,21,20,20,21,19,21,20,18,20,20,18,21,20,21,22,16,19,21,20,19,18,19,21,19,17,19,19,21,21,19,17,17,17,16,20,17,24,20,20,19,18,19,18,20,21,19,20,20,19,19,19,19,20,18,18],\"xaxis\":\"x\",\"yaxis\":\"y\",\"type\":\"histogram\"},{\"alignmentgroup\":\"True\",\"bingroup\":\"x\",\"hovertemplate\":\"positions=Attack\\u003cbr\\u003eage=%{x}\\u003cbr\\u003ecount=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"Attack\",\"marker\":{\"color\":\"#ab63fa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"Attack\",\"offsetgroup\":\"Attack\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[38,35,37,36,35,35,35,35,34,36,34,33,33,33,36,34,37,37,35,35,37,35,34,37,35,33,33,33,33,35,33,33,34,33,31,34,35,33,37,31,34,33,34,33,32,31,34,32,33,33,32,32,33,33,34,32,33,32,30,33,34,31,33,34,36,31,33,32,33,31,33,34,34,33,34,33,32,34,32,31,32,31,32,29,31,33,33,32,31,31,32,30,32,32,31,30,32,33,31,33,31,33,30,30,32,34,34,29,31,29,30,32,29,31,31,30,29,30,31,31,30,32,31,32,35,30,29,27,31,33,29,32,29,31,30,30,31,30,30,31,30,28,33,32,30,30,28,30,35,30,32,32,31,32,31,29,31,30,31,30,30,31,30,28,29,29,30,31,31,30,31,26,31,31,30,29,31,30,29,28,30,29,32,30,29,28,29,31,34,30,31,29,28,37,28,31,29,29,29,30,30,30,31,29,30,30,29,28,29,30,33,30,31,28,30,28,30,29,30,29,31,30,31,31,29,29,27,29,31,30,31,28,29,29,32,32,27,28,32,29,27,28,27,26,29,32,29,30,30,35,32,28,30,30,27,28,31,31,31,28,28,30,31,31,27,29,28,30,29,32,30,28,26,28,28,32,28,27,28,31,29,29,33,31,31,30,28,30,28,27,27,27,26,29,27,27,29,28,29,27,30,30,29,28,30,33,31,29,26,27,26,28,29,32,28,23,30,28,26,29,26,28,28,27,30,29,28,28,30,28,28,27,26,27,30,30,27,29,28,27,31,30,28,27,27,28,29,28,29,26,27,27,27,29,30,26,27,26,26,26,26,28,26,27,27,32,27,28,26,32,29,28,29,26,28,29,27,28,28,28,26,31,26,26,27,28,32,26,28,28,27,27,25,29,27,27,27,27,33,28,32,28,26,26,28,27,27,30,25,30,27,28,25,25,27,26,26,25,25,29,28,25,29,25,27,35,27,28,29,28,26,28,25,26,26,26,26,28,30,26,25,25,29,30,28,28,25,27,28,27,24,25,25,27,27,31,24,27,26,24,26,26,27,26,29,25,28,25,26,28,26,28,24,25,24,26,27,24,28,25,26,30,27,27,26,27,25,26,29,31,29,24,29,26,27,26,28,26,26,26,24,25,28,22,25,25,30,26,27,28,24,24,26,31,25,28,27,27,27,25,31,27,28,28,28,28,26,27,33,30,28,27,25,24,25,24,24,29,26,27,28,27,24,27,29,26,27,23,24,29,29,28,24,23,26,25,26,33,24,26,27,24,25,24,25,25,27,26,27,29,26,27,27,27,25,30,25,30,27,28,27,26,27,25,26,25,24,27,28,28,25,27,27,25,26,27,24,28,24,27,25,27,26,25,28,26,23,27,23,24,25,24,28,27,30,25,26,26,29,26,26,24,26,27,26,24,24,27,27,27,25,24,26,26,25,25,25,24,26,27,26,25,24,25,25,25,24,32,24,23,25,24,26,27,24,24,22,26,23,23,26,26,24,26,23,23,23,23,25,28,27,24,25,23,27,24,24,24,24,29,25,26,27,27,25,26,25,26,26,26,26,25,27,27,25,26,23,24,22,24,23,23,23,26,23,23,23,28,24,27,23,23,25,24,23,24,25,26,25,23,26,26,28,23,27,29,29,24,25,28,26,26,25,33,25,24,26,23,22,24,23,23,24,27,23,23,23,24,27,22,22,23,27,25,27,23,23,24,24,25,23,24,23,27,24,24,24,24,24,25,23,24,21,19,23,24,27,24,26,23,25,22,22,25,22,25,23,25,26,23,23,23,23,23,27,25,23,23,25,23,24,28,23,26,22,26,22,31,24,24,21,22,27,25,29,25,25,25,22,22,29,24,24,26,25,29,23,24,22,23,25,26,25,26,23,22,27,25,23,23,23,22,23,24,25,23,23,22,22,27,22,22,23,23,21,24,22,25,26,25,22,22,23,22,23,21,19,25,26,25,23,27,28,31,26,26,22,21,27,26,26,25,26,27,24,25,23,27,27,24,25,22,23,22,25,24,22,24,23,26,23,22,24,25,24,22,23,22,23,24,23,25,22,24,22,24,24,25,22,22,23,24,24,25,23,25,24,24,22,22,24,24,23,26,23,25,25,21,21,23,22,23,22,23,25,21,27,23,22,26,22,23,25,22,26,25,21,22,22,21,23,25,22,26,23,24,21,21,21,22,25,21,24,22,23,24,27,21,28,22,23,21,27,24,23,22,24,25,22,22,27,25,23,27,24,24,24,21,22,24,21,22,23,25,21,21,24,22,22,24,24,23,23,24,24,24,25,24,21,22,20,22,26,26,21,28,21,23,22,22,22,25,26,26,23,23,23,23,25,26,26,29,25,24,23,21,25,22,20,20,25,21,22,21,25,24,21,25,21,21,21,21,21,28,22,21,28,22,30,22,22,22,22,22,23,22,22,25,22,22,23,24,24,21,22,21,27,25,22,22,21,22,21,21,23,23,24,24,23,23,22,23,25,23,22,26,23,21,21,24,25,20,24,23,22,20,23,22,23,22,25,22,21,29,22,22,19,22,23,22,20,23,24,21,22,21,26,21,24,25,23,22,21,20,20,19,23,23,27,20,21,22,21,21,21,22,25,20,22,21,21,25,25,23,22,22,22,21,22,21,21,21,21,22,21,22,20,23,20,20,20,21,25,20,20,20,21,22,21,24,23,21,25,22,23,21,21,25,21,21,24,23,24,20,20,24,24,23,21,23,26,25,19,22,24,20,20,23,22,21,20,23,20,23,23,23,21,21,20,23,22,22,22,19,22,21,22,20,20,22,22,20,19,23,22,18,25,22,23,19,22,20,20,26,20,20,22,21,23,25,20,22,19,22,19,19,22,19,22,21,21,21,22,19,19,22,23,23,24,20,22,28,22,23,20,20,23,20,19,25,19,21,20,23,20,19,19,19,19,19,20,20,21,18,19,25,22,19,22,24,19,25,23,19,24,22,23,24,20,23,19,20,20,20,23,23,20,23,22,21,21,22,21,18,24,21,19,19,20,20,20,26,25,20,19,25,24,24,19,23,20,23,23,21,20,21,20,20,19,20,20,18,24,19,26,24,22,19,21,20,23,21,22,22,23,19,18,20,20,23,24,23,22,24,20,20,20,22,24,19,20,20,18,25,18,25,21,19,20,22,19,20,22,22,21,19,18,21,20,19,21,18,23,20,21,20,22,22,20,21,20,19,22,21,18,20,19,20,20,19,21,23,21,19,26,22,20,19,24,23,19,20,24,21,22,18,19,19,18,18,19,19,21,21,19,18,22,23,25,18,23,19,20,18,19,18,19,21,18,21,21,18,20,19,20,19,20,19,19,20,22,18,22,21,21,20,20,22,21,21,20,22,18,24,17,18,17,22,21,19,20,19,21,18,18,17,21,20,19,18,22,18,18,20,21,21,18,24,20,21,22,25,21,18,20,19,18,20,17,19,19,20,20,23,17,20,18,18,22,17,19,18,19,19,21,19,20,21,19,18,19,18,18,18,17,19,19,19,19,17,19,22,19,22,20,18,18,16,18,17,19],\"xaxis\":\"x\",\"yaxis\":\"y\",\"type\":\"histogram\"},{\"alignmentgroup\":\"True\",\"bingroup\":\"x\",\"hovertemplate\":\"positions=Missing\\u003cbr\\u003eage=%{x}\\u003cbr\\u003ecount=%{y}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"legendgroup\":\"Missing\",\"marker\":{\"color\":\"#FFA15A\",\"pattern\":{\"shape\":\"\"}},\"name\":\"Missing\",\"offsetgroup\":\"Missing\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[18],\"xaxis\":\"x\",\"yaxis\":\"y\",\"type\":\"histogram\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"},\"margin\":{\"b\":0,\"l\":0,\"r\":0,\"t\":30}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"age\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"count\"}},\"legend\":{\"title\":{\"text\":\"positions\"},\"tracegroupgap\":0},\"barmode\":\"relative\"},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('7d86374d-a030-4cfb-81a2-81893bdb2570');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n:::\n:::\n\n\n## Saving your work\n\nPress \"Save\" or <kbd>Ctrl</kbd> + <kbd>S</kbd> to save your script.\n\nYour project can be reopened from the \"Projects\" menu in Spyder.\n\nBy default, your variables are *not* saved, which is another reason why working with a script is important: you can execute the whole script in one go to get everything back. You can however save your variables as a `.spydata` file if you want to (for example, if it takes a lot of time to process your data).\n\n## Summary\n\nThis morning we looked at a lot of Python features, so don’t worry if they\nhaven’t all sunk in. Programming is best learned through practice, so\nkeep at it! Here’s a rundown of the concepts we covered\n\n| Concept | Desctiption |\n|----|----|\n| **The console vs scripts** | The **console** is our window into the computer, this is where we send code directly to the computer. **Scripts** are files which we can write, edit, store and run code, that’s where you’ll write most of your Python. |\n| **Variables** | **Variables** are the nouns of programming, this is where we store information, the objects and things of our coding. They come in different types like integers, strings and lists. |\n| **Indexing** | In order to access elements of a sequence variable, like a list, we need to **index**, e.g. `example_numbers[2]`. Python counts from 0. |\n| **Functions** | **Functions** are the verbs of programming, they perform actions on our variables. Call the function by name and put inputs inside parentheses, e.g. `round(2.5)` |\n| **Help** | Running `help( ... )` will reveal the **help** documentation about a function or type. |\n| **Packages** | We can bring external code into our environment with `import ...`. This is how we use **packages**, an essential for Python. Don’t forget to install the package first! |\n\n",
    "supporting": [
      "1 - Fundamentals_files\\figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script type=\"text/javascript\">\nwindow.PlotlyConfig = {MathJaxConfig: 'local'};\nif (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\nif (typeof require !== 'undefined') {\nrequire.undef(\"plotly\");\nrequirejs.config({\n    paths: {\n        'plotly': ['https://cdn.plot.ly/plotly-2.31.1.min']\n    }\n});\nrequire(['plotly'], function(Plotly) {\n    window._Plotly = Plotly;\n});\n}\n</script>\n\n"
      ]
    }
  }
}