{
  "hash": "8592272fe75f41755d7968a91cae23d5",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: My Python Report\nauthor: Yuli Astriani & Elisabeth Natalia Palan Bolen\ndate: 9-Jul-25\nformat: html\nwarning: false\n---\n\n## **Presenting Coffee Survey Data Using Markdown**\n\n# Check the columns header\n  \n<div style=\"display: flex; gap: 40px; justify-content: space-between; align-items: start;\">\n\n<div style=\"width: 48%;\">\n\n::: {#f979bd4d .cell execution_count=1}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show code\"}\nimport pandas as pd\ndf = pd.read_csv(\"../../data_sources/coffee_survey.csv\")\ndf.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nIndex(['Unnamed: 0', 'age', 'cups', 'where_drink', 'purchase_other',\n       'favourite', 'favorite_specify', 'additions', 'additions_other',\n       'sweetener', 'style', 'strength', 'roast_level', 'caffeine',\n       'expertise', 'coffee_a_bitterness', 'coffee_a_acidity',\n       'coffee_a_personal_preference', 'coffee_b_bitterness',\n       'coffee_b_acidity', 'coffee_b_personal_preference',\n       'coffee_c_bitterness', 'coffee_c_acidity',\n       'coffee_c_personal_preference', 'coffee_d_bitterness',\n       'coffee_d_acidity', 'coffee_d_personal_preference', 'prefer_abc',\n       'prefer_ad', 'prefer_overall', 'wfh', 'total_spend', 'know_source',\n       'most_paid', 'most_willing', 'value_cafe', 'spent_equipment',\n       'value_equipment', 'gender', 'education_level', 'employment_status',\n       'number_children', 'political_affiliation'],\n      dtype='object')\n```\n:::\n:::\n\n\n- it is found that column 0 is \"Unnamed\"\n\n</div> <div style=\"width: 48%;\">\n\n::: {#3073a3cf .cell execution_count=2}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show code\"}\ndf.rename(columns={'Unnamed: 0':'Number'}, \ninplace=True)\ndf.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nIndex(['Number', 'age', 'cups', 'where_drink', 'purchase_other', 'favourite',\n       'favorite_specify', 'additions', 'additions_other', 'sweetener',\n       'style', 'strength', 'roast_level', 'caffeine', 'expertise',\n       'coffee_a_bitterness', 'coffee_a_acidity',\n       'coffee_a_personal_preference', 'coffee_b_bitterness',\n       'coffee_b_acidity', 'coffee_b_personal_preference',\n       'coffee_c_bitterness', 'coffee_c_acidity',\n       'coffee_c_personal_preference', 'coffee_d_bitterness',\n       'coffee_d_acidity', 'coffee_d_personal_preference', 'prefer_abc',\n       'prefer_ad', 'prefer_overall', 'wfh', 'total_spend', 'know_source',\n       'most_paid', 'most_willing', 'value_cafe', 'spent_equipment',\n       'value_equipment', 'gender', 'education_level', 'employment_status',\n       'number_children', 'political_affiliation'],\n      dtype='object')\n```\n:::\n:::\n\n\n- Rename column 0 to \"Number\"\n</div> </div>\n\n# Display the favourite\n**Favourite types**\n\n::: {#79c3a35e .cell execution_count=3}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show code\"}\n#drop any Nan value in column \"favourite\"\nfavorites = df[\"favourite\"].dropna()\nfavourites_count = favorites.value_counts()\n\n#plot it\nimport matplotlib.pyplot  as plt \nfavourites_count.plot(kind='bar', color='skyblue', edgecolor='black')\nplt.title('Distribution of favourite coffee types')\nplt.xlabel('Coffee types')\nplt.ylabel('Count')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](MyReport_files/figure-html/cell-4-output-1.png){width=601 height=653}\n:::\n:::\n\n\n**Favourite types by gender**\n\n::: {#2039c89b .cell execution_count=4}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show code\"}\n#drop any Nan value in column \"gender\" and \"favourite\"\nclean_df = df.dropna(subset=['favourite', 'gender'])\n\n#groupby using sns\nimport seaborn as sns \n# Set Seaborn style\nsns.set(style=\"whitegrid\")\n\n# Create the countplot\nplt.figure(figsize=(10, 6))\nFig_1 = sns.countplot(data=clean_df, x='favourite', hue='gender', palette='pastel', edgecolor='gray')\n\n# Add title and labels\nplt.title('Coffee Preference by Gender')\nplt.xlabel('Favourite Coffee')\nplt.ylabel('Count')\nplt.xticks(rotation=60, ha = 'right')\nplt.tight_layout()\n\n# Add value labels on top of each bar\nfor container in Fig_1.containers:\n    Fig_1.bar_label(container, padding=3, fontsize=10)\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](MyReport_files/figure-html/cell-5-output-1.png){width=944 height=559}\n:::\n:::\n\n\n**Cups types by gender**\n\n::: {#e57753a4 .cell execution_count=5}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show code\"}\n#clean NaN value in column cup and gender\n\ndef display_table_with_gridlines(table, title=\"Table\"):\n    # Get table width\n    table_str = table.to_string()\n    width = len(table_str.split('\\n')[0])\n    \n    # Print with gridlines\n    print(title)\n    print(\"=\" * width)  # Header line\n    print(table.to_string())\n    print(\"=\" * width)  # Bottom line\n\n# Usage\ndf_clean = df.dropna(subset=[\"gender\", \"cups\"])\ngb = df_clean.groupby(\"gender\")\ncups_by_gender = gb[\"cups\"].value_counts()\n\n#plot using table\ncups_table = cups_by_gender.unstack(fill_value=0)\ndisplay_table_with_gridlines(cups_table, \"Coffee Cups by Gender\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoffee Cups by Gender\n====================================================================\ncups                      1     2    3   4  Less than 1  More than 4\ngender                                                              \nFemale                  366   279   57  12          133            6\nMale                    751  1138  344  94          149           48\nNon-binary               38    38    7   0           17            3\nOther (please specify)    1     6    1   1            1            0\nPrefer not to say        11    15    0   2            4            1\n====================================================================\n```\n:::\n:::\n\n\n**Strength types by gender**\n\n::: {#a7b67c41 .cell execution_count=6}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show code\"}\n#clean NaN value in column cup and gender\ndf_clean = df.dropna(subset=[\"gender\", \"strength\"])\ngb = df_clean.groupby(\"gender\")\nstrength_by_gender = gb[\"strength\"].value_counts()\nstrength_table = strength_by_gender.unstack(fill_value=0)\n\n#plot using doughnut\nimport matplotlib.pyplot as plt\n\n# Create subplots for each gender\ngender_categories = strength_table.index\nnum_genders = len(gender_categories)\n\nfig, axes = plt.subplots(1, num_genders, figsize=(4*num_genders, 6))\n\n# If only one gender, make axes a list\nif num_genders == 1:\n    axes = [axes]\n\n# Colors for consistency across charts\ncolors = plt.cm.Set3(range(len(strength_table.columns)))\n\n# Create doughnut for each gender\nfor i, gender in enumerate(gender_categories):\n    data = strength_table.loc[gender]\n    labels = strength_table.columns\n    \n    # Remove zero values for cleaner chart\n    non_zero_data = data[data > 0]\n    non_zero_labels = non_zero_data.index\n    \n    # Create doughnut chart\n    wedges, texts, autotexts = axes[i].pie(non_zero_data, labels=non_zero_labels, \n                                          autopct='%1.1f%%', startangle=90,\n                                          colors=colors[:len(non_zero_data)],\n                                          wedgeprops=dict(width=0.5))  # width=0.5 makes it a doughnut\n    \n    axes[i].set_title(f'{gender}\\n(Total: {data.sum()})', fontsize=12, fontweight='bold')\n\nplt.suptitle('Coffee Cups Consumption by Gender', fontsize=16, fontweight='bold')\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](MyReport_files/figure-html/cell-7-output-1.png){width=1910 height=424}\n:::\n:::\n\n\n# Display correlation between bitterness, accidity, and personal preferences\n\n**Coffee A**\n\n::: {#39b8ad92 .cell execution_count=7}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show code\"}\n#import module for statistics \nimport scipy.stats as stats\nfrom scipy.stats import pearsonr\n\n# Drop rows with any NaN\nsubset_cols = ['coffee_a_bitterness', 'coffee_a_acidity', 'coffee_a_personal_preference']\ndf_clean = df.dropna(subset=subset_cols)\n\n# Correlation and p-values\nr_bitter, p_bitter = pearsonr(df_clean['coffee_a_bitterness'], df_clean['coffee_a_personal_preference'])\nr_acid, p_acid = pearsonr(df_clean['coffee_a_acidity'], df_clean['coffee_a_personal_preference'])\n\n# Plot\nplt.figure(figsize=(10, 5))\n\n# Bitterness vs Preference\nplt.subplot(1, 2, 1)\nsns.regplot(data=df_clean, x='coffee_a_bitterness', y='coffee_a_personal_preference', scatter_kws={'alpha':0.5})\nplt.title(f'Bitterness vs Preference\\nr={r_bitter:.2f}, p={p_bitter:.3f}')\nplt.xlabel('Bitterness')\nplt.ylabel('Preference')\n\n# Acidity vs Preference\nplt.subplot(1, 2, 2)\nsns.regplot(data=df_clean, x='coffee_a_acidity', y='coffee_a_personal_preference', scatter_kws={'alpha':0.5})\nplt.title(f'Acidity vs Preference\\nr={r_acid:.2f}, p={p_acid:.3f}')\nplt.xlabel('Acidity')\nplt.ylabel('Preference')\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](MyReport_files/figure-html/cell-8-output-1.png){width=944 height=463}\n:::\n:::\n\n\n# Display spending\n**Correlation between age and total spending**\n\n::: {#3562ee95 .cell execution_count=8}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Show code\"}\n# Drop any NaN values in both columns\ndf_clean = df.dropna(subset=['age', 'total_spend'])\n\n# Create cross-tabulation (similar to value_counts but for two variables)\nage_spend_crosstab = pd.crosstab(df_clean['age'], df_clean['total_spend'])\n\n# Plot as heatmap (most suitable for this type of data)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.figure(figsize=(10, 6))\nsns.heatmap(age_spend_crosstab, annot=True, fmt='d', cmap='Blues', cbar_kws={'label': 'Count'})\nplt.title('Age vs Total Spend Distribution')\nplt.xlabel('Total Spend')\nplt.ylabel('Age Group')\nplt.xticks(rotation=45)\nplt.yticks(rotation=0)\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](MyReport_files/figure-html/cell-9-output-1.png){width=904 height=558}\n:::\n:::\n\n\n",
    "supporting": [
      "MyReport_files"
    ],
    "filters": [],
    "includes": {}
  }
}