---
 title: Project-Python
 data: 
 format: 
   dashboard:
       theme: quartz
 warning: false
 date: 2025-01-16
---


### To execute : !quarto render dashboard.py





## Introduction {height=2%}
                           Objective:  Identification of factors that determine selling price of houses in Melbourne


```{python}
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
hs= pd.read_csv("melb_data.csv")

```

## Composition  {height=30%, width=00%}
Composition of Sample:



```{python}
fig=plt.figure(figsize=(60,40))
ax1=plt.subplot(2,3,1)
#hs['Regionname'] = hs['Regionname'].astype('category')
tab1=hs['Regionname'].value_counts()
sns.barplot(x = tab1.index, y = tab1)
#plt.show()
ax2=plt.subplot(2,3,2)
tab2 = hs['Type'].value_counts()
sns.barplot(x = tab2.index, y = tab2)
#plt.show()
ax3=plt.subplot(2,3,3)
tab3 = hs['Method'].value_counts()
#sns.barplot(x = tab3.index, y = tab3)
p1=plt.pie(tab3, labels=tab3.index, startangle=90);

ax4=plt.subplot(2,3,4)
tab4 = hs['CouncilArea'].value_counts()
sns.barplot(x = tab4.index, y = tab4)
#plt.show()
ax5=plt.subplot(2,3,5)
tab5 = hs['Suburb'].value_counts()
#sns.barplot(x = tab5.index, y = tab5)
p2=plt.pie(tab5, labels=tab5.index, startangle=90);
#plt.show()
ax6=plt.subplot(2,3,6)
tab6 = hs['SellerG'].value_counts()
sns.barplot(x = tab6.index, y = tab6)
plt.show()


```

## Preliminary Analysis  {height=30%, width=05%}
Preliminary Analysis:



```{python}
hs_sub = hs[["Price", "Rooms","Distance","Bedroom2","Bathroom","Car", "BuildingArea"]]
hs_sub.describe()

```

```{python}
fig=plt.figure(figsize=(80,80))
ax1=plt.subplot(2,3,1)
sns.boxplot(data=hs, y="Price", x="Method")
ax2=plt.subplot(2,3,2)
sns.boxplot(data=hs, y="Price", x="Type")
ax3=plt.subplot(2,3,3)
sns.boxplot(data=hs, y="Price", x="Regionname")
ax4=plt.subplot(2,3,4)
sns.boxplot(data=hs, y="Price", x="Suburb")
ax5=plt.subplot(2,3,5)
sns.boxplot(data=hs, y="Price", x="CouncilArea")
ax6=plt.subplot(2,3,6)
sns.boxplot(data=hs, y="Price", x="SellerG")


```

```{python}
g = sns.clustermap(hs_sub.corr(),  method = 'complete', cmap = 'RdBu', annot  = True, annot_kws = {'size': 8})
plt.setp(g.ax_heatmap.get_xticklabels(), rotation=90);

```

## Inference  {height=30%}
Inference

```{python}
import streamlit as st
from PIL import Image

# Load the saved figure
figure_path = "inf.png"
image = Image.open(figure_path)
image
# Display the figure in the dashboard
#st.title("Results from OLS")
#st.image(image, caption="Loaded Figure", use_column_width=True)


import statsmodels.formula.api as smf
mod = smf.ols("Price ~ Rooms + Bathroom + Distance + Car + BuildingArea +  Type + Method + Regionname", hs)
res = mod.fit()
res.summary()

```

## Conclusions  {height=3%}
Conclusions: 


```{python}
print("Houses selling prices are dependent on ")
print("                house type, selling type, no of rooms,")
print("                no of bedrooms, no of bathrooms, ")
print("                no of car parking slots, buildinf area,")
print("                distance from UDB....")
```