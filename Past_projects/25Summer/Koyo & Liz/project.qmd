---
 title: Bird Strikes and Aeroplane Damages in the U.S. (1990-1999)
 author: Liz & Koyo
 Date: 2025-01-16
 format: 
   dashboard: 
    theme: sandstone
---

```{python}
#| output: false
import pandas as pd
import numpy as np
import seaborn as sns  # simple to make visualisations
import matplotlib.pyplot as plt
import plotly.express as px

df_raw = pd.read_csv("birds_strikes.csv")

# copy the data
df = df_raw.copy()

# explore the data
df.shape      # Size of DataFrame

# column names
df.columns

unique_values = df["birds_struck"].unique()
unique_values

# drop observations with the value of 0 in birds_struck
df = df[df["birds_struck"] != "0"]
# Replace values containing the string '2-oct' with '2 - 10'
df.loc[df["birds_struck"].str.contains("2-Oct", na = False), "birds_struck"] = "2 - 10"
# Remove rows with NaN in the categorical column of birds_strucks
df = df.dropna(subset=['remarks'])
df = df.dropna(subset=['birds_struck'])


# convert the variables to be categorical
df['time_of_day'] = df['time_of_day'].astype('category')
df['state'] = df['state'].astype('category')
df['phase_of_flt'] = df['phase_of_flt'].astype('category')
df['birds_struck'] = df['birds_struck'].astype('category')
df['birds_struck']

# Convert to a categorical variable with the custom order
custom_order = ["1", "2 - 10", "11-100", "Over 100"]
df['birds_struck'] = pd.Categorical(df['birds_struck'], categories=custom_order, ordered=True)


unique_values = df["species"].unique()
unique_values


# print the categories
print(df['time_of_day'].cat.categories)
print(df['state'].cat.categories)
print(df['phase_of_flt'].cat.categories)

# Create a new variable based on whether 'NO DAMAGE' is in the 'remarks' column
df['damage'] = np.where(df['remarks'].str.contains('NO DAMAGE'), 0, 1)
df.groupby("birds_struck")["damage"].mean()


# Group bys


# Start by grouping our dataset by some varibale
gb = df.groupby("state")

# Get the count of rows in each group
counts = gb.size()

# check
df_filtered = df[df["state"] == "AB"]
df_filtered["state"]

# Find the maximum count
max_count = counts.max()

# Find the state(s) with the maximum count
state_with_max_count = counts.idxmax()


#| output: false

# Display the results: CA with the maximum count of 987
print(f"Maximum count: {max_count}")
print(f"State with maximum count: {state_with_max_count}")


# Group bys phase of flight: Approach, Climb, Descent, En Route, Landing Roll, Parked, Take-off run, Taxi
tot_count = len(df)
gb = df.groupby("phase_of_flt")

# Get the count of rows in each group
counts = gb.size()
print(counts)

max_count = counts.max()
print(max_count)

# check
df_filtered = df[df["phase_of_flt"].str.contains("Approach", na=False)]
df_filtered["phase_of_flt"].count()


# Find the maximum count
max_count = counts.max()
ratio1 = max_count/tot_count 
percentage = round(ratio1 * 100, 1)
# Find the state(s) with the maximum count
phase_with_max_count = counts.idxmax()


# Display the results: Approach with the maximum count of 4143, that is, 
print(f"Maximum count: {max_count}")
print(f"phase of flight with maximum count of bird struck: {phase_with_max_count}")
print(f"Percentage of birds struck by phase of flight: {percentage}%")


print(f"{percentage}%")

# which state has the highest reported bird struck incidents?
gb["damage"].mean()

# alterntaively you can do it in one line
df.groupby("phase_of_flt")["damage"].mean()
df.groupby("species")["damage"].mean()
unique_values = df["species"].unique()
unique_values

# Alternatively
df.groupby("phase_of_flt").mean(numeric_only = True)


```

## Visualisation 


```{python}
#| title: "Are greater birds stikes associated with higher damage rates?"
# Calculate the proportion of damage = 1 for each category in birds_struck
damage_rate = df.groupby('birds_struck')['damage'].mean().reset_index()

# Define a gradient of orange colors
colors = sns.color_palette("Oranges", n_colors=len(damage_rate))

# Plot the bar chart with custom colors
sns.barplot(
    x='birds_struck', 
    y='damage', 
    data=damage_rate, 
    ci=None, 
    palette=colors
)

# Customize the y-axis to display ratio explicitly
_ = plt.title('Damage Rates by No. of Birds Stricks')
_ = plt.xlabel('No. of birds')
_ = plt.ylabel('Damage Rate')
_ = plt.savefig("tb.png")


## to render, in "Anaconda prompt" --from search bar and then find the right path: the one in 
# spyder up-right corner path window. 


```

```{python}
#| title: "Does higher flight speed increase the bird stike damage likelihood?"
import statsmodels.formula.api as smf
import statsmodels.api as sm

# Make it numeric

df["damage"]= df["damage"] * 1

# Create a quantile variable (4 quantiles, i.e., quartiles)
df['speed_quantile'] = pd.qcut(df['speed'], q=10, labels=['Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6', 'Q7', 'Q8', 'Q9', 'Q10' ])

# Make the model binomial

mod = smf.glm("damage ~ speed_quantile", df)

mod = smf.glm("damage ~ speed_quantile", df,
              family = sm.families.Binomial())

# Get the results
results = mod.fit()
results.summary()

sns.relplot(data = df, x = "speed_quantile", y= "damage")

sns.lineplot(x = df["speed_quantile"],
             y = results.fittedvalues,
             color = "purple")


```

```{python}
#| title: "Does higher flight speed increase the bird stike damage likelihood?"
import statsmodels.formula.api as smf
import statsmodels.api as sm

# Make it numeric

df["damage"]= df["damage"] * 1

# Make the model binomial

mod = smf.glm("damage ~ height", df)

mod = smf.glm("damage ~ height", df,
              family = sm.families.Binomial())

# Get the results
results = mod.fit()
results.summary()

sns.relplot(data = df, x = "height", y= "damage")

sns.lineplot(x = df["height"],
             y = results.fittedvalues,
             color = "green")



```

## Table and value boxes


```{python}
#| content: valuebox
#| title: "State Reports Highest incidence of Birds Strikes"
#| icon: feather
#| color: primary
state_with_max_count

```

```{python}
#| content: valuebox
#| title: "Which phase of flight sees highest likelihood of birds strike?"
#| icon: rulers
#| color: secondary
f"Approach : {df_filtered['phase_of_flt'].count()}"


```

```{python}
#| Title: "Summary Statistics"
#| format:
#|   html: 
#|        theme: cosmo
#|        css: styles.css
#|        toc: true
# Summary statistics
#summary = df.describe()
#summary































 


```